//Technical task https://docs.google.com/spreadsheets/d/1YrJWy67tpgEo2GomPbx0Fp2gYMT7JLArQt8AY1bdfUs
// https://docs.google.com/spreadsheets/d/1HgKRU24pB7EbuVbUa-HqBhI7UMKXg3_u43hDlEzYXS8
SET ThousandSep=' ';
SET DecimalSep=',';
SET MoneyThousandSep=' ';
SET MoneyDecimalSep=',';
SET MoneyFormat='# ##0,00 ⊆;-# ##0,00 ⊆';
SET TimeFormat='hh:mm:ss';
SET DateFormat='DD.MM.YYYY';
SET TimestampFormat='DD.MM.YYYY hh:mm:ss[.fff]';
SET FirstWeekDay=0;
SET BrokenWeeks=1;
SET ReferenceDay=0;
SET FirstMonthOfYear=1;
SET CollationLocale='ru-UA';
//SET CreateSearchIndexOnReload=1;
SET MonthNames='янв.;февр.;мар.;апр.;мая;июн.;июл.;авг.;сент.;окт.;нояб.;дек.';
SET LongMonthNames='январь;февраль;март;апрель;май;июнь;июль;август;сентябрь;октябрь;ноябрь;декабрь';
SET DayNames='пн;вт;ср;чт;пт;сб;вс';
SET LongDayNames='понедельник;вторник;среда;четверг;пятница;суббота;воскресенье';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:μ;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';

SET DIC_QVD_PATH = 'lib://OCDSKGData/02_QVD_DB/01_Dictionary/';
SET TRN_QVD_PATH = 'lib://OCDSKGData/02_QVD_DB/02_Transaction/';
SET FILES_PATH = 'lib://OCDSKGData/01_DataFiles/';
SET LOCAL_FILES_PATH = 'lib://OCDSKGData/03_LocalFiles/';

//SET vBaseURL = 'http://***/api/releases'; // TEST 
SET vBaseURL = 'http://***/api/releases'; // LIVE 
Set vOffsetNo = '?offset=';
Set vOffsetBase = 0;
Set vPageNo = '&page=';
Set vPageNoBase = 0;

SET vPageSize = '&size=1000';
// Step of changing packs (the larger the number, the less often QVD files are overwritten) vPageSize x vStep
SET vStep = 5;

// Currency Rates
SET vCurrencyURL = 'http://***/api/catalogs/currency-rates';
// Property Directory
SET vLegalFormURL = 'http://***/api/catalogs/legal-forms';

// To convert boolean values
BoolMap:
Mapping
Load * Inline [
BoolValue, BoolValueNum
true,	   1
false,	   0
];

SET vBoolConvert = "ApplyMap('BoolMap', Lower($1), $2)";

// Date and time conversions
SET vDateConvert = "ConvertToLocalTime($1)";
SET vFloorDateConvert = "Date(Floor(ConvertToLocalTime($1)))";

SUB Parties(party_name)

trace party name = $(party_name);

[$(party_name)_tmp]:
NoConcatenate
Load IDParty as [ID$(party_name)Orig],
	[parties_scheme] as [$(party_name)_scheme],
	[parties_id] as [$(party_name)_id],
	[parties_legalName] as [$(party_name)_legalName],
	[parties_legalName_ru] as [$(party_name)_legalName_ru],
	[parties_legalName_kg] as [$(party_name)_legalName_kg],
	[parties_ateCode] as [$(party_name)_ateCode],
	[parties_countryName] as [$(party_name)_countryName],
	[parties_region] as [$(party_name)_region],
	[parties_subregion] as [$(party_name)_subregion],
	[parties_district] as [$(party_name)_district],
	[parties_subdistrict] as [$(party_name)_subdistrict],
	[parties_subsubdistrict] as [$(party_name)_subsubdistrict],
	[parties_locality] as [$(party_name)_locality],
	[parties_streetAddress] as [$(party_name)_streetAddress],
//    parties_complexKeyForCP as [$(party_name)_complexKeyForCP],
    parties_latestRelease_date as [$(party_name)_latestRelease_date]
Resident parties
where parties_role like '$(party_name)'
;

if NOT Isnull( FileSize('$(DIC_QVD_PATH)$(party_name).qvd')) THEN
Concatenate ($(party_name)_tmp)
load [ID$(party_name)Orig],
	[$(party_name)_scheme],
	[$(party_name)_id],
	[$(party_name)_legalName],
	[$(party_name)_legalName_ru],
	[$(party_name)_legalName_kg],
	[$(party_name)_ateCode],
	[$(party_name)_countryName],
	[$(party_name)_region],
	[$(party_name)_subregion],
	[$(party_name)_district],
	[$(party_name)_subdistrict],
	[$(party_name)_subsubdistrict],
	[$(party_name)_locality],
	[$(party_name)_streetAddress],
//    [$(party_name)_complexKeyForCP],
    [$(party_name)_latestRelease_date]
FROM [$(DIC_QVD_PATH)$(party_name).qvd] (qvd);
ENDIF;

[$(party_name)]:
NoConcatenate
LOAD LastValue([ID$(party_name)Orig]) AS [ID$(party_name)Orig],
	LastValue([$(party_name)_scheme]) AS [$(party_name)_scheme],
	LastValue([$(party_name)_id]) AS [$(party_name)_id],
	LastValue([$(party_name)_legalName]) AS [$(party_name)_legalName],
	LastValue([$(party_name)_legalName_ru]) AS [$(party_name)_legalName_ru],
	LastValue([$(party_name)_legalName_kg]) AS [$(party_name)_legalName_kg],
	LastValue([$(party_name)_ateCode]) AS [$(party_name)_ateCode],
	LastValue([$(party_name)_countryName]) AS [$(party_name)_countryName],
	LastValue([$(party_name)_region]) AS [$(party_name)_region],
	LastValue([$(party_name)_subregion]) AS [$(party_name)_subregion],
	LastValue([$(party_name)_district]) AS [$(party_name)_district],
	LastValue([$(party_name)_subdistrict]) AS [$(party_name)_subdistrict],
	LastValue([$(party_name)_subsubdistrict]) AS [$(party_name)_subsubdistrict],
	LastValue([$(party_name)_locality]) AS [$(party_name)_locality],
	LastValue([$(party_name)_streetAddress]) AS [$(party_name)_streetAddress],
//    LastValue([$(party_name)_complexKeyForCP]) AS [$(party_name)_complexKeyForCP], //скорее всего не нужен - закоментить после теста
    LastValue([$(party_name)_latestRelease_date]) AS [$(party_name)_latestRelease_date]
    ,AutoNumber([ID$(party_name)Orig], 'ID$(party_name)') AS [ID$(party_name)]
Resident [$(party_name)_tmp]
Group by [ID$(party_name)Orig]
Order by [$(party_name)_latestRelease_date] asc
;

drop table [$(party_name)_tmp];

Store [$(party_name)] into [$(DIC_QVD_PATH)$(party_name).qvd] (qvd);
Drop table [$(party_name)]; 


[$(party_name)_contactPoints_tmp]:
NoConcatenate
Load IDParty as [ID$(party_name)Orig],
	[parties_CP_name] AS [$(party_name)_contactPoint_name],
	[parties_CP_email] AS [$(party_name)_contactPoint_email],
	[parties_CP_telephone] AS [$(party_name)_contactPoint_telephone],
	[parties_CP_role] AS [$(party_name)_contactPoint_role],
//    parties_complexKeyForCP AS [$(party_name)_complexKeyForCP],
    contactPoint_latestRelease_date as [$(party_name)_contactPoint_latestRelease_date]
Resident contactPoints
where parties_role like '$(party_name)'
;

if NOT Isnull( FileSize('$(DIC_QVD_PATH)$(party_name)_contanctPoint.qvd')) THEN
Concatenate ($(party_name)_contactPoints_tmp)
load [ID$(party_name)Orig],
	[$(party_name)_contactPoint_name],
	[$(party_name)_contactPoint_email],
	[$(party_name)_contactPoint_telephone],
	[$(party_name)_contactPoint_role],
//    [$(party_name)_complexKeyForCP],
    [$(party_name)_contactPoint_latestRelease_date]
FROM [$(DIC_QVD_PATH)$(party_name)_contanctPoint.qvd] (qvd);
ENDIF;

[$(party_name)_contactPoints]:
NoConcatenate
Load  LastValue([ID$(party_name)Orig]) AS [ID$(party_name)Orig],
	LastValue([$(party_name)_contactPoint_name]) AS [$(party_name)_contactPoint_name],
	LastValue([$(party_name)_contactPoint_email]) AS [$(party_name)_contactPoint_email],
	LastValue([$(party_name)_contactPoint_telephone]) AS [$(party_name)_contactPoint_telephone],
	LastValue([$(party_name)_contactPoint_role]) AS [$(party_name)_contactPoint_role],
//    LastValue([$(party_name)_complexKeyForCP]) AS [$(party_name)_complexKeyForCP],
    LastValue([$(party_name)_contactPoint_latestRelease_date]) AS [$(party_name)_contactPoint_latestRelease_date]
    ,AutoNumber([ID$(party_name)Orig], 'ID$(party_name)') AS [ID$(party_name)]
Resident $(party_name)_contactPoints_tmp
Group by [$(party_name)_contactPoint_name], [ID$(party_name)Orig]
order by [$(party_name)_contactPoint_latestRelease_date] asc
;

drop table $(party_name)_contactPoints_tmp;

Store [$(party_name)_contactPoints] into [$(DIC_QVD_PATH)$(party_name)_contactPoints.qvd] (qvd);
Drop table [$(party_name)_contactPoints]; 

End Sub;

// The section can be moved to the end of the download queue without additional settings and changes!

CPVClassification:
LOAD
    F1 as IDClassCPVOrig,
    F2 as CPVClassNameRu
FROM [lib://OCDSKG_dictionaries]
(html, utf8, embedded labels, table is @1);

Store CPVClassification into [$(DIC_QVD_PATH)CPVClassification.qvd] (qvd);
Drop table CPVClassification; 

Multilang_Dictionaries:
NoConcatenate
LOAD
    F1 as Index,
    F2 as Reference,
    F3 as Ru,
    F4 as En,
    F5 as Kg,
    F6 as attributeOf
FROM [lib://OCDSKG_dictionaries]
(html, utf8, embedded labels, table is @1, url is 'https://***')
where F1 <> 'Index' and len(F1)>0;

store Multilang_Dictionaries into [$(DIC_QVD_PATH)/Multilang_Dictionaries.qvd] (qvd);
Drop table Multilang_Dictionaries;

Multilang_FieldNames:
NoConcatenate
LOAD
    F1 as Index,
    F2 as Reference,
    F3 as /*Lan1*/Ru,
    F4 as /*Lan2*/En,
    F5 as /*Lan3*/Kg
FROM [lib://OCDSKG_dictionaries]
(html, utf8, embedded labels, table is @1, url is 'https://***')
where F1 <> 'Index' and len(F1)>0;

store Multilang_FieldNames into [$(DIC_QVD_PATH)/Multilang_FieldNames.qvd] (qvd);
Drop table Multilang_FieldNames;


set Verbatim = 1; // To load field records as names of new fields that have multiple spaces

Multilang_Labels:
NoConcatenate
LOAD
    F1 as "Index",
    F2 as Reference,
    F3 as Ru,
    F4 as En,
    F5 as Kg
FROM [lib://OCDSKG_dictionaries]
(html, utf8, embedded labels, table is @1, url is 'https://***')
where F1 <> 'Index' and len(F1)>0;

store Multilang_Labels into [$(DIC_QVD_PATH)/Multilang_Labels.qvd] (qvd);
Drop table Multilang_Labels;

// Descriptions of sheets and objects
TranslationsHelp:
LOAD 
    Index,
    Ru,
    En,
    Kg
FROM [lib://OCDSKG_dictionaries]
(html, utf8, embedded labels, table is @1, url is 'https://***')
Where Len(Index)>0;

Store TranslationsHelp into [$(DIC_QVD_PATH)TranslationsHelp.qvd] (qvd);

Drop Table TranslationsHelp;

CountryMap:
LOAD
    F1 as CountryDBName,
    F2 as CountryNewDBName
FROM [lib://OCDSKG_dictionaries]
(html, utf8, embedded labels, table is @1, url is 'https://***')
Where F1 <> 'DBName';

Store CountryMap into lib://OCDSKGData/02_QVD_DB/01_Dictionary/CountryMap.qvd (qvd);
Drop table CountryMap;

set Verbatim = 0;

// Loading of exchange rates - for dates and currencies when price offers arrived
LIB CONNECT TO 'OCDSKG';

RestConnectorMasterTable:
SQL SELECT 
	"date",
	"rate",
	"code",
	"name"
FROM JSON (wrap off) "rates"
WITH CONNECTION (
URL "$(vCurrencyURL)"
);

Currency:
LOAD	Date([date]) AS CurrencyDate,
	[rate] AS CurrencyRate,
	[code] AS CurrencyCode,
	[name] AS CurrencyName
RESIDENT RestConnectorMasterTable;

DROP TABLE RestConnectorMasterTable;

Store Currency into [$(DIC_QVD_PATH)Currency.qvd] (qvd);

// Property Directory
RestConnectorMasterTable:
SQL SELECT 
	"organizationId",
	"legalForm"
FROM JSON (wrap off) "legalForms"
WITH CONNECTION (
URL "$(vLegalFormURL)"
);

legalForms:
LOAD	
	[organizationId] AS organizationId,
	[legalForm] AS legalForm
RESIDENT RestConnectorMasterTable;

DROP TABLE RestConnectorMasterTable;

Store legalForms into [$(DIC_QVD_PATH)legalForms.qvd] (qvd);

Drop Table legalForms;

// Loading a portion of tender identifiers since the last timestamp
LIB CONNECT TO 'OCDSKG';

IF NOT IsNull(FileSize('$(DIC_QVD_PATH)OffsetTable.txt')) THEN
  OffsetTable:
  LOAD 
  		OffsetDateTime
  FROM
  [$(DIC_QVD_PATH)OffsetTable.txt]
  (txt, utf8, embedded labels, delimiter is ',', msq);

  Let vCurrentReloadSessionOffset = Peek('OffsetDateTime', -1, 'OffsetTable');

  DROP Table OffsetTable;

  ELSE

  Let vCurrentReloadSessionOffset = vOffsetBase;
ENDIF;

LET vURL = vBaseURL&vOffsetNo&vCurrentReloadSessionOffset&vPageNo&vPageNoBase&vPageSize;

TenderHeadersAll:
LOAD * Inline [
TenderId, TenderModificateDateTime, OffsetDateTime
];

DO //Beginning of the cycle for loading identifiers

  TRACE;
  TRACE $(vURL);

  RestConnectorMasterTable:
  SQL SELECT 
      "totalPages",
      "totalElements",
      "last",
      "first",
      "__KEY_root",
      (SELECT 
          "ocid",
          "date",
          "__FK_content"
      FROM "content" FK "__FK_content"),
      (SELECT 
          "pageSize",
          "pageNumber",
          "offset",
          "paged",
          "unpaged",
          "__KEY_pageable",
          "__FK_pageable",
          (SELECT 
              "sorted",
              "unsorted",
              "__FK_sort"
          FROM "sort" FK "__FK_sort")
      FROM "pageable" PK "__KEY_pageable" FK "__FK_pageable")
  FROM JSON (wrap on) "root" PK "__KEY_root"
  WITH CONNECTION(URL "$(vURL)");

  [TenderHeadersTmp]:
  LOAD	[ocid] AS [ocid],
      [date] AS [date],
      [__FK_content] AS [__KEY_root]
  RESIDENT RestConnectorMasterTable
  WHERE NOT IsNull([__FK_content]);

  [pageable]:
  LOAD
      [pageNumber] AS [pageNumber],
      [__KEY_pageable] AS [__KEY_pageable],
      [__FK_pageable] AS [__KEY_root]
  RESIDENT RestConnectorMasterTable
  WHERE NOT IsNull([__FK_pageable]);


  [root]:
  LOAD	[totalPages] AS [totalPages],
      [totalElements] AS [totalElements],
      $(vBoolConvert([last], 0)) AS [last],
      [first] AS [first]
  RESIDENT RestConnectorMasterTable
  WHERE NOT IsNull([__KEY_root]);

  DROP TABLE RestConnectorMasterTable;

  Let vTotalElements = Peek('totalElements', -1, 'root');

  if $(vTotalElements) = 0 THEN

    Trace 'No new releases';

    exit script;

  end if;



  Let vIsLastPage = Peek('last', -1, 'root');

  Let vNextPageNumber = num(Peek('pageNumber', -1, 'pageable'))+1;

  LET vRowsQtyTenderHeaders = NoOfRows('TenderHeadersTmp');

  IF $(vRowsQtyTenderHeaders) > 0 THEN
      Concatenate (TenderHeadersAll)
      LOAD Distinct
          [ocid] as TenderId,
          $(vDateConvert(date)) as TenderModificateDateTime,
          date as OffsetDateTime,
          '$(vURL)' as THUri
      Resident TenderHeadersTmp;	
  ENDIF;
  
  DROP Tables TenderHeadersTmp, root, pageable;
  
  Trace;
  Trace $(vNextPageNumber);

  LET vURL = vBaseURL&vOffsetNo&vCurrentReloadSessionOffset&vPageNo&vNextPageNumber&vPageSize;

//   trace;
//   trace $(vURL);
    
LOOP WHILE $(vIsLastPage) <> 1;


STORE TenderHeadersAll into [$(FILES_PATH)TenderHeadersAll.qvd] (qvd); // For Debug

//Exclusion of entries with identical tender identifiers
TenderHeaders:
NoConcatenate
LOAD 
	TenderId,
	LastValue(TenderModificateDateTime) as TenderModificateDateTime,
	LastValue(OffsetDateTime) as OffsetDateTime,
    LastValue(THUri) as THUri
Resident TenderHeadersAll	
Group by TenderId
Order By TenderModificateDateTime;

DROP Table TenderHeadersAll;

//STORE TenderHeaders into [$(FILES_PATH)TenderHeaders.qvd] (qvd); // For Debug

LET vAllRowsQty = NoOfRows('TenderHeaders');

//STORE OffsetTable INTO  [$(FILES_PATH)OffsetTable.txt] (txt); // For Debug
// DROP Table OffsetTable;

//If there were no new identifiers, exit
IF $(vAllRowsQty) = 0 THEN

  TRACE WARNING! No tenders changed;

  EXIT SCRIPT;
ENDIF;

// A breakdown into portions for storage in QVD
TenderHeadersBase:
LOAD TenderId as TenderIdBase, 
     TenderModificateDateTime as TenderModificateDateTimeBase,
     OffsetDateTime as OffsetDateTimeBase,
     THUri as THUriBase,
     if(IsNull(Previous(THUri)), 1, if(Previous(THUri)=THUri, Peek('BatchNo', -1, 'TenderHeadersBase'),  RangeSum(Peek('BatchNo', -1, 'TenderHeadersBase'), 1) )) as BatchNo
Resident  TenderHeaders
Order by TenderModificateDateTime;   

STORE TenderHeadersBase into [$(FILES_PATH)TenderHeadersBase.qvd] (qvd); // For Debug

DROP Table TenderHeaders;

BatchTable:
LOAD 	 
	 Only(BatchNo) as Batch
Resident TenderHeadersBase
Group By BatchNo
Order By BatchNo;

//STORE BatchTable into [$(FILES_PATH)BatchTable.qvd] (qvd); // For Debug

LET vLastBatch = Peek('Batch', -1, 'BatchTable');
LET vFirstBatch = Peek('Batch', 0, 'BatchTable');

//
FOR vBatchNo =  $(vFirstBatch) to  $(vLastBatch) step vStep 
//

LET vBatchNoStep = $(vBatchNo) + vStep - 1;

TRACE BatchNo $(vBatchNo) - $(vBatchNoStep);

TenderHeaders:
NoConcatenate
LOAD TenderIdBase as TenderId, 
     OffsetDateTimeBase as OffsetDateTime,
     THUriBase as THUri
Resident  TenderHeadersBase
Where BatchNo >= $(vBatchNo) AND BatchNo <= $(vBatchNoStep)
Order By BatchNo;

LET vRowsQty = NoOfRows('TenderHeaders'); 

FOR Each vTenderId in FieldValueList('TenderId') 

LET vURL = vBaseURL&'/'&vTenderId; 

RestConnectorMasterTable:
SQL SELECT 
	"ocid",
	"id" AS "id_u21",
	"date" AS "date_u4",
	"tag",
	"initiationType",
	"__KEY_root",
    	(SELECT 
		"$oid",
		"__FK__id"
	FROM "_id" FK "__FK__id"),
    (SELECT 
		"@Value" AS "@Value_u1",
		"__FK_eventErrors"
	FROM "eventErrors" FK "__FK_eventErrors" ArrayValueAlias "@Value_u1"),
	(SELECT 
		"id" AS "id_u0",
		"__KEY_parties",
		"__FK_parties",
		(SELECT 
			"scheme",
			"id",
			"legalName",
			"legalName_ru",
			"legalName_kg",
			"__FK_identifier"
		FROM "identifier" FK "__FK_identifier"),
		(SELECT 
			"ateCode",
			"countryName",
			"region",
			"subregion",
			"district",
			"subdistrict",
			"subsubdistrict",
			"locality",
			"streetAddress",
			"__FK_address"
		FROM "address" FK "__FK_address"),
		(SELECT 
			"name",
			"email",
			"telephone",
			"role",
			"__FK_contactPoints"
		FROM "contactPoints" FK "__FK_contactPoints"),
		(SELECT 
			"@Value",
			"__FK_roles"
		FROM "roles" FK "__FK_roles" ArrayValueAlias "@Value")
	FROM "parties" PK "__KEY_parties" FK "__FK_parties"),
	(SELECT 
		"id" AS "id_u10",
		"status" AS "status_u0",
		"currentStage",
		"datePublished",
		"date" AS "date_u0",
		"procurementMethod",
		"procurementMethodDetails",
        "submissionMethod",
		"procurementMethodRationale",
		"__KEY_tender",
		"__FK_tender",
		(SELECT 
			"amount",
			"currency",
			"__FK_value"
		FROM "value" FK "__FK_value"),
		(SELECT 
			"startDate",
			"endDate",
			"__FK_tenderPeriod"
		FROM "tenderPeriod" FK "__FK_tenderPeriod"),
		(SELECT 
			"startDate" AS "startDate_u0",
			"endDate" AS "endDate_u0",
			"__FK_enquiryPeriod"
		FROM "enquiryPeriod" FK "__FK_enquiryPeriod"),
		(SELECT 
			"id" AS "id_u1",
			"type",
			"__FK_qualificationRequirements"
		FROM "qualificationRequirements" FK "__FK_qualificationRequirements"),
		(SELECT 
			"id" AS "id_u2",
			"status",
			"__KEY_lots",
			"__FK_lots",
			(SELECT 
				"amount" AS "amount_u0",
				"currency" AS "currency_u0",
				"__FK_value_u0"
			FROM "value" FK "__FK_value_u0")
		FROM "lots" PK "__KEY_lots" FK "__FK_lots"),
		(SELECT 
			"id" AS "id_u5",
			"relatedLot",
			"quantity",
			"__KEY_items",
			"__FK_items",
			(SELECT 
				"scheme" AS "scheme_u0",
				"id" AS "id_u3",
				"__FK_classification"
			FROM "classification" FK "__FK_classification"),
			(SELECT 
				"id" AS "id_u4",
				"name" AS "name_u0",
				"__KEY_unit",
				"__FK_unit",
				(SELECT 
					"amount" AS "amount_u1",
					"currency" AS "currency_u1",
					"__FK_value_u1"
				FROM "value" FK "__FK_value_u1")
			FROM "unit" PK "__KEY_unit" FK "__FK_unit")
		FROM "items" PK "__KEY_items" FK "__FK_items"),
		(SELECT 
			"id" AS "id_u6",
			"lateDeliveryRate",
			"latePaymentRate",
			"lateGuaranteeRate",
			"guaranteePercent",
			"maxDeductibleAmountDelivery",
			"maxDeductibleAmountPayment",
			"maxDeductibleAmountGuarantee",
			"hasGuarantee",
			"hasInsurance",
			"hasRelatedServices",
			"hasSpares",
			"hasTechnicalControl",
			"hasPrepayment",
			"hasAcceptancePayment",
			"hasShipmentPayment",
			"prepaymentPercent",
			"acceptancePaymentPercent",
			"shipmentPaymentPercent",
			"insuranceType",
			"hasArbitralTribunal",
			"__FK_conditionOfContract"
		FROM "conditionOfContract" FK "__FK_conditionOfContract"),
		(SELECT 
			"id" AS "id_u7",
			"relatedItem",
			"relatedLot" AS "relatedLot_u0",
            "datePublished" AS "datePublished_tender_document",
			"__FK_documents"
		FROM "documents" FK "__FK_documents"),
		(SELECT 
			"id" AS "id_u9",
			"date",
			"description",
			"dateAnswered",
			"answer",
			"__KEY_enquiries",
			"__FK_enquiries",
			(SELECT 
				"id" AS "id_u8",
				"__FK_author"
			FROM "author" FK "__FK_author")
		FROM "enquiries" PK "__KEY_enquiries" FK "__FK_enquiries")
	FROM "tender" PK "__KEY_tender" FK "__FK_tender"),
	(SELECT 
		"__KEY_bids",
		"__FK_bids",
		(SELECT 
			"id" AS "id_u14",
			"status" AS "status_u1",
			"date" AS "date_u1",
            "dateDisclosed",
			"__KEY_details",
			"__FK_details",
			(SELECT 
				"id" AS "id_u11",
				"__KEY_relatedLots",
				"__FK_relatedLots",
				(SELECT 
					"amount" AS "amount_u2",
					"currency" AS "currency_u2",
					"__FK_value_u2"
				FROM "value" FK "__FK_value_u2")
			FROM "relatedLots" PK "__KEY_relatedLots" FK "__FK_relatedLots"),
			(SELECT 
				"id" AS "id_u12",
				"relatedLot" AS "relatedLot_u1",
				"relatedItem" AS "relatedItem_u0",
				"__KEY_priceProposals",
				"__FK_priceProposals",
				(SELECT 
					"__KEY_unit_u0",
					"__FK_unit_u0",
					(SELECT 
						"amount" AS "amount_u3",
						"currency" AS "currency_u3",
						"__FK_value_u3"
					FROM "value" FK "__FK_value_u3")
				FROM "unit" PK "__KEY_unit_u0" FK "__FK_unit_u0")
			FROM "priceProposals" PK "__KEY_priceProposals" FK "__FK_priceProposals"),
			(SELECT 
				"id" AS "id_u13",
				"__FK_tenderers"
			FROM "tenderers" FK "__FK_tenderers")
		FROM "details" PK "__KEY_details" FK "__FK_details")
	FROM "bids" PK "__KEY_bids" FK "__FK_bids"),
	(SELECT 
		"id" AS "id_u17",
		"status" AS "status_u2",
		"submissionDate",
		"type" AS "type_u0",
		"complaintID",
		"title" AS "title_u0",
		"description" AS "description_u0",
		"reviewDate",
		"responseDate",
		"__KEY_complaints",
		"__FK_complaints",
		(SELECT 
			"id" AS "id_u15",
			"__FK_author_u0"
		FROM "author" FK "__FK_author_u0"),
		(SELECT 
			"id" AS "id_u16",
			"datePublished" AS "datePublished_u0",
			"documentType",
			"title",
			"__FK_documents_u0"
		FROM "documents" FK "__FK_documents_u0")
	FROM "complaints" PK "__KEY_complaints" FK "__FK_complaints"),
	(SELECT 
		"id" AS "id_u18",
		"status" AS "status_u3",
//		"relatedLot" AS "relatedLot_u2",
        (SELECT 
			"@Value" AS "@Value_u2",
			"__FK_relatedLots_u0"
		FROM "relatedLots" FK "__FK_relatedLots_u0" ArrayValueAlias "@Value_u2"),
		"relatedBid",
        "datePublished"  AS "datePublished_u1", 
		"__KEY_awards",
		"__FK_awards",
		(SELECT 
			"amount" AS "amount_u4",
			"currency" AS "currency_u4",
			"__FK_value_u4"
		FROM "value" FK "__FK_value_u4")
	FROM "awards" PK "__KEY_awards" FK "__FK_awards"),
	(SELECT 
		"id" AS "id_u20",
		"status" AS "status_u4",
		"date" AS "date_u3",
		"dateSigned",
		"__KEY_contracts",
		"__FK_contracts",
		(SELECT 
			"@Value" AS "@Value_u0",
			"__FK_awardIDs"
		FROM "awardIDs" FK "__FK_awardIDs" ArrayValueAlias "@Value_u0"),
		(SELECT 
			"id" AS "id_u19",
			"relatedLot" AS "relatedLot_u3",
			"__FK_items_u0"
		FROM "items" FK "__FK_items_u0"),
		(SELECT 
			"amount" AS "amount_u5",
			"currency" AS "currency_u5",
			"__FK_value_u5"
		FROM "value" FK "__FK_value_u5")
	FROM "contracts" PK "__KEY_contracts" FK "__FK_contracts"),
	(SELECT 
		"relationship",
		"identifier",
		"__FK_relatedProcesses"
	FROM "relatedProcesses" FK "__FK_relatedProcesses")
FROM JSON (wrap on) "root" PK "__KEY_root"
WITH CONNECTION(URL "$(vURL)");


NEXT vTenderId;

//========1. Transactions========

//====Releases====
[releases]:
LOAD	[ocid] AS [IDReleaseOCIDOrig],
	[id_u21] AS [release_id],
	$(vDateConvert([date_u4])) AS [release_date],
	[tag] AS [release_tag],
	[initiationType] AS [release_initiationType],
	[__KEY_root] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);


left join(releases)
LOAD	[$oid] AS [release_oid],
	[__FK__id] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK__id]);

//The step of adding reviewBody to the release
[roles]:
LOAD	//[@Value] AS [@Value],
	[__FK_roles] AS [__KEY_parties]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_roles])
AND [@Value] = 'reviewBody'
;

left join(roles)
//[parties]:
LOAD Distinct	
	[id_u0] AS [IDReviewBodyOrig],
	[__KEY_parties] AS [__KEY_parties],
	[__FK_parties] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_parties]);

left join(releases)
Load [__KEY_root],
	 IDReviewBodyOrig
Resident roles;

drop table roles;


if NOT Isnull( FileSize('$(TRN_QVD_PATH)releases.qvd')) THEN
Concatenate (releases)
load [release_id],
    [IDReleaseOCIDOrig],
	[release_date],
	[release_tag],
	[release_initiationType],
    [release_oid],
    IDReviewBodyOrig
FROM [$(TRN_QVD_PATH)releases.qvd] (qvd)
where not exists (IDReleaseOCIDOrig);
ENDIF;

Release:
NoConcatenate
LOAD [release_id],
    [IDReleaseOCIDOrig],
	[release_date],
	[release_tag],
	[release_initiationType],
    [release_oid],
    IDReviewBodyOrig
    ,AutoNumber(IDReleaseOCIDOrig, 'IDReleaseOCID') As IDReleaseOCID
Resident releases;

drop table releases;
    
Store Release into [$(TRN_QVD_PATH)releases.qvd] (qvd);
Drop table Release; 

//====Tenders====

[tender]:
LOAD	[id_u10] AS [IDTenderOrig],
	[status_u0] AS [tender_status],
	[currentStage] AS [tender_currentStage],
	$(vDateConvert([datePublished])) AS [tender_date_timePublished],
    $(vFloorDateConvert([datePublished])) AS [tender_datePublished],
	$(vDateConvert([date_u0])) AS [tender_date_time],
    $(vFloorDateConvert([date_u0])) AS [tender_date],
	[procurementMethod] AS [tender_procurementMethod],
	[procurementMethodDetails] AS [tender_procurementMethodDetails],
	[procurementMethodRationale] AS [tender_procurementMethodRationale],
    [submissionMethod] AS [tender_submissionMethod],
	[__KEY_tender] AS [__KEY_tender],
	[__FK_tender] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tender]);

//[tenderPeriod]:
left join(tender)
LOAD	$(vDateConvert([startDate])) AS [tender_tenderPeriod_startDateTime],
	$(vFloorDateConvert([startDate])) AS [tender_tenderPeriod_startDate],
	$(vDateConvert([endDate])) AS [tender_tenderPeriod_endDateTime],
    $(vFloorDateConvert([endDate])) AS [tender_tenderPeriod_endDate],
	[__FK_tenderPeriod] AS [__KEY_tender]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tenderPeriod]);


//[enquiryPeriod]:
left join(tender)
LOAD	
	$(vDateConvert([startDate_u0])) AS [tender_enquiryPeriod_startDateTime],
	$(vFloorDateConvert([startDate_u0])) AS [tender_enquiryPeriod_startDate],
	$(vDateConvert([endDate_u0])) AS [tender_enquiryPeriod_endDateTime],
    $(vFloorDateConvert([endDate_u0])) AS [tender_enquiryPeriod_endDate],
	[__FK_enquiryPeriod] AS [__KEY_tender]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_enquiryPeriod]);

//[value]:
left join(tender)
LOAD	[amount] AS [tender_amount],
	[currency] AS [tender_currency],
	[__FK_value] AS [__KEY_tender]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_value]);

left join(tender)
LOAD	
    [ocid] AS [IDReleaseOCIDOrig],
    [ocid] AS [IDReleaseOCID],
	[__KEY_root] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

//The stage of adding the buyer to the procedure
[roles]:
LOAD	[@Value] AS [@Value],
	[__FK_roles] AS [__KEY_parties]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_roles])
AND ([@Value] = 'buyer' OR [@Value] = 'allowedTenderer')
;

left join(roles)
//[parties]:
LOAD Distinct	
	[id_u0] AS [IDParty],
	[__KEY_parties] AS [__KEY_parties],
	[__FK_parties] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_parties]);

left join(tender)
Load 
	 [__KEY_root],
	 [IDParty] AS [IDbuyerOrig]
Resident roles
where [@Value] = 'buyer'
;

left Join(tender)
Load [__KEY_root],
	 count(distinct [IDParty]) as tender_number_of_allowedTenderers
Resident roles
Where [@Value] = 'allowedTenderer'
Group by [__KEY_root]
;

drop table roles;


//[conditionOfContract]:
left join(tender)
LOAD	[id_u6] AS [conditionOfContract_id],
	[lateDeliveryRate] AS [tender_COC_lateDeliveryRate],
	[latePaymentRate] AS [tender_COC_latePaymentRate],
	[lateGuaranteeRate] AS [tender_COC_lateGuaranteeRate],
	[guaranteePercent] AS [tender_COC_guaranteePercent],
	[maxDeductibleAmountDelivery] AS [tender_COC_maxDeductibleAmountDelivery],
	[maxDeductibleAmountPayment] AS [tender_COC_maxDeductibleAmountPayment],
	[maxDeductibleAmountGuarantee] AS [tender_COC_maxDeductibleAmountGuarantee],
	$(vBoolConvert([hasGuarantee], 0)) AS [tender_COC_hasGuarantee],
	$(vBoolConvert([hasInsurance], 0)) AS [tender_COC_hasInsurance],
	$(vBoolConvert([hasRelatedServices], 0)) AS [tender_COC_hasRelatedServices],
	$(vBoolConvert([hasSpares], 0)) AS [tender_COC_hasSpares],
	$(vBoolConvert([hasTechnicalControl], 0)) AS [tender_COC_hasTechnicalControl],
	$(vBoolConvert([hasPrepayment], 0)) AS [tender_COC_hasPrepayment],
	$(vBoolConvert([hasAcceptancePayment], 0)) AS [tender_COC_hasAcceptancePayment],
	$(vBoolConvert([hasShipmentPayment], 0)) AS [tender_COC_hasShipmentPayment],
	[prepaymentPercent] AS [tender_COC_prepaymentPercent],
	[acceptancePaymentPercent] AS [tender_COC_acceptancePaymentPercent],
	[shipmentPaymentPercent] AS [tender_COC_shipmentPaymentPercent],
	[insuranceType] AS [tender_COC_insuranceType],
	$(vBoolConvert([hasArbitralTribunal], 0)) AS [tender_COC_hasArbitralTribunal],
	[__FK_conditionOfContract] AS [__KEY_tender]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_conditionOfContract]);

if NOT Isnull( FileSize('$(TRN_QVD_PATH)Tender.qvd')) THEN
Concatenate (tender)
load [IDTenderOrig],
	IDReleaseOCIDOrig,
	[tender_currentStage],
	[tender_status],
	[tender_datePublished],
    [tender_date_timePublished],
	[tender_date],
    [tender_date_time],
	[tender_procurementMethod],
	[tender_procurementMethodDetails],
    [tender_procurementMethodRationale],
	[tender_submissionMethod],
    [tender_enquiryPeriod_startDate],
    [tender_enquiryPeriod_startDateTime],
	[tender_enquiryPeriod_endDate],
    [tender_enquiryPeriod_endDateTime],
    [tender_tenderPeriod_startDate],
    [tender_tenderPeriod_startDateTime],
	[tender_tenderPeriod_endDate],
    [tender_tenderPeriod_endDateTime],
    [tender_amount],
	[tender_currency],
    IDbuyerOrig,
    [conditionOfContract_id],
	[tender_COC_lateDeliveryRate],
	[tender_COC_latePaymentRate],
	[tender_COC_lateGuaranteeRate],
	[tender_COC_guaranteePercent],
	[tender_COC_maxDeductibleAmountDelivery],
	[tender_COC_maxDeductibleAmountPayment],
	[tender_COC_maxDeductibleAmountGuarantee],
	[tender_COC_hasGuarantee],
	[tender_COC_hasInsurance],
	[tender_COC_hasRelatedServices],
	[tender_COC_hasSpares],
	[tender_COC_hasTechnicalControl],
	[tender_COC_hasPrepayment],
	[tender_COC_hasAcceptancePayment],
	[tender_COC_hasShipmentPayment],
	[tender_COC_prepaymentPercent],
	[tender_COC_acceptancePaymentPercent],
	[tender_COC_shipmentPaymentPercent],
	[tender_COC_insuranceType],
	[tender_COC_hasArbitralTribunal]
    ,tender_number_of_allowedTenderers
FROM [$(TRN_QVD_PATH)Tender.qvd] (qvd)
where not exists (IDReleaseOCID, IDReleaseOCIDOrig);
ENDIF;

Tender:
NoConcatenate
Load 
	[IDTenderOrig],
	IDReleaseOCIDOrig,
	[tender_currentStage],
	[tender_status],
	[tender_datePublished],
    [tender_date_timePublished],
	[tender_date],
    [tender_date_time],
	[tender_procurementMethod],
	[tender_procurementMethodDetails],
    tender_procurementMethodRationale,
	[tender_submissionMethod],
    [tender_enquiryPeriod_startDate],
    [tender_enquiryPeriod_startDateTime],
	[tender_enquiryPeriod_endDate],
    [tender_enquiryPeriod_endDateTime],
    [tender_tenderPeriod_startDate],
    [tender_tenderPeriod_startDateTime],
	[tender_tenderPeriod_endDate],
    [tender_tenderPeriod_endDateTime],
    [tender_amount],
	[tender_currency],
    IDbuyerOrig,
    [conditionOfContract_id],
	[tender_COC_lateDeliveryRate],
	[tender_COC_latePaymentRate],
	[tender_COC_lateGuaranteeRate],
	[tender_COC_guaranteePercent],
	[tender_COC_maxDeductibleAmountDelivery],
	[tender_COC_maxDeductibleAmountPayment],
	[tender_COC_maxDeductibleAmountGuarantee],
	[tender_COC_hasGuarantee],
	[tender_COC_hasInsurance],
	[tender_COC_hasRelatedServices],
	[tender_COC_hasSpares],
	[tender_COC_hasTechnicalControl],
	[tender_COC_hasPrepayment],
	[tender_COC_hasAcceptancePayment],
	[tender_COC_hasShipmentPayment],
	[tender_COC_prepaymentPercent],
	[tender_COC_acceptancePaymentPercent],
	[tender_COC_shipmentPaymentPercent],
	[tender_COC_insuranceType],
	[tender_COC_hasArbitralTribunal]
    ,tender_number_of_allowedTenderers
    ,AutoNumber(IDReleaseOCIDOrig, 'IDReleaseOCID') As IDReleaseOCIDKey
    ,AutoNumber(IDTenderOrig, 'IDTender') as IDTender
    ,AutoNumber(IDbuyerOrig, 'IDbuyer') as IDbuyerKey
Resident tender;

drop table tender;

Store Tender into [$(TRN_QVD_PATH)Tender.qvd] (qvd);
Drop table Tender; 

//==== Event Errors ====
eventErrors:
LOAD	[@Value_u1] AS tender_event_errors,
	[__FK_eventErrors] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_eventErrors]);

left join(eventErrors) 
LOAD	[id_u10] AS [IDTenderOrig],
		[__FK_tender] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tender]);

left join(eventErrors)
LOAD	
    [ocid] AS [IDReleaseOCIDOrig],
    [ocid] AS [IDReleaseOCID],
	[__KEY_root] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

IF NOT Isnull( FileSize('$(TRN_QVD_PATH)EventErrors.qvd')) THEN
    Concatenate (eventErrors)
    load 
        tender_event_errors,
        IDTenderOrig,
        IDReleaseOCIDOrig
    FROM [$(TRN_QVD_PATH)EventErrors.qvd] (qvd)
    where not exists (IDReleaseOCID, IDReleaseOCIDOrig);
ENDIF

EventErrors:
Load tender_event_errors,
	IDTenderOrig,
    IDReleaseOCIDOrig
    ,AutoNumber(IDReleaseOCIDOrig, 'IDReleaseOCID') As IDReleaseOCIDKey
    ,AutoNumber(IDTenderOrig, 'IDTender') as IDTenderKey
Resident eventErrors;

drop table eventErrors;

Store EventErrors into [$(TRN_QVD_PATH)EventErrors.qvd] (qvd);
Drop table EventErrors; 

//====Tender Qualification Requirements====

[qualificationRequirements]:
LOAD	[id_u1] AS [qualificationRequirements_id],
	[type] AS [qualificationRequirements_type],
	[__FK_qualificationRequirements] AS [__KEY_tender]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_qualificationRequirements]);

left join(qualificationRequirements) 
LOAD	[id_u10] AS [IDTenderOrig],
	[__KEY_tender] AS [__KEY_tender],
	[__FK_tender] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tender]);

left join(qualificationRequirements)
LOAD	
    [ocid] AS [IDReleaseOCIDOrig],
    [ocid] AS [IDReleaseOCID],
	[__KEY_root] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

if NOT Isnull( FileSize('$(TRN_QVD_PATH)QualificationRequirements.qvd')) THEN
Concatenate (qualificationRequirements)
load [qualificationRequirements_id],
	[qualificationRequirements_type],
    IDTenderOrig,
    IDReleaseOCIDOrig
FROM [$(TRN_QVD_PATH)QualificationRequirements.qvd] (qvd)
where not exists (IDReleaseOCID, IDReleaseOCIDOrig);
ENDIF;

QualificationRequirements:
NoConcatenate
Load [qualificationRequirements_id],
	[qualificationRequirements_type],
    IDTenderOrig,
    IDReleaseOCIDOrig
    ,AutoNumber(IDReleaseOCIDOrig, 'IDReleaseOCID') As IDReleaseOCIDKey
    ,AutoNumber(IDTenderOrig, 'IDTender') as IDTenderKey
Resident qualificationRequirements;

drop table qualificationRequirements;

Store QualificationRequirements into [$(TRN_QVD_PATH)QualificationRequirements.qvd] (qvd);
Drop table QualificationRequirements; 


//====Tender Enquirires====
[enquiries]:
LOAD	[id_u9] AS [enquiries_id],
	$(vDateConvert([date])) AS [enquiries_date],
	[description] AS [enquiries_description],
	$(vDateConvert([dateAnswered])) AS [enquiries_dateAnswered],
	[answer] AS [enquiries_answer],
	[__KEY_enquiries] AS [__KEY_enquiries],
	[__FK_enquiries] AS [__KEY_tender]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_enquiries]);

left join(enquiries) 
LOAD	[id_u10] AS [IDTenderOrig],
	[__KEY_tender] AS [__KEY_tender],
	[__FK_tender] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tender]);

left join(enquiries)
LOAD	
    [ocid] AS [IDReleaseOCIDOrig],
    [ocid] AS [IDReleaseOCID],
	[__KEY_root] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

//[author]:
left join(enquiries)
LOAD	[id_u8] AS [enquiries_author_id],
	[__FK_author] AS [__KEY_enquiries]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_author]);

if NOT Isnull( FileSize('$(TRN_QVD_PATH)Enquiries.qvd')) THEN
Concatenate (enquiries)
load [enquiries_id],
	[enquiries_date],
	[enquiries_description],
	[enquiries_dateAnswered],
    [enquiries_author_id],
	[enquiries_answer],
    IDTenderOrig,
    IDReleaseOCIDOrig
FROM [$(TRN_QVD_PATH)Enquiries.qvd] (qvd)
where not exists (IDReleaseOCID, IDReleaseOCIDOrig);
ENDIF;

Enquiries:
NoConcatenate
Load [enquiries_id],
	[enquiries_date],
	[enquiries_description],
	[enquiries_dateAnswered],
    [enquiries_author_id],
	[enquiries_answer],
    IDTenderOrig,
    IDReleaseOCIDOrig
    ,AutoNumber(IDReleaseOCIDOrig, 'IDReleaseOCID') As IDReleaseOCIDKey
    ,AutoNumber(IDTenderOrig, 'IDTender') as IDTenderKey
    ,AutoNumber(enquiries_author_id, 'IDenquirer') as IDenquirerKey
Resident enquiries;

drop table enquiries;

Store Enquiries into [$(TRN_QVD_PATH)Enquiries.qvd] (qvd);
Drop table Enquiries; 


//====Tender documents====
[documents]:
LOAD	[id_u7] AS [tender_document_id],
	[relatedItem] AS [tender_document_relatedItem],
	[relatedLot_u0] AS [tender_document_relatedLot],
    $(vDateConvert([datePublished_tender_document])) AS [tender_document_datePublished],
    if(not IsNull([relatedItem]), 'item', 
    	if(not IsNull([relatedLot_u0]), 'lot',
        								 'tender')) AS [tender_document_documentOf],
	[__FK_documents] AS [__KEY_tender]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_documents]);

left join(documents) 
LOAD	[id_u10] AS [IDTenderOrig],
	[__KEY_tender] AS [__KEY_tender],
	[__FK_tender] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tender]);

left join(documents)
LOAD	
    [ocid] AS [IDReleaseOCIDOrig],
    [ocid] AS [IDReleaseOCID],
	[__KEY_root] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

if NOT Isnull( FileSize('$(TRN_QVD_PATH)TenderDocuments.qvd')) THEN
Concatenate (documents)
load [tender_document_id],
	[tender_document_relatedItem],
    [tender_document_relatedLot],
	[tender_document_datePublished],
    tender_document_documentOf,
    IDReleaseOCIDOrig,
    IDTenderOrig
FROM [$(TRN_QVD_PATH)TenderDocuments.qvd] (qvd)
where not exists (IDReleaseOCID, IDReleaseOCIDOrig);
ENDIF;

TenderDocuments:
NoConcatenate
Load [tender_document_id],
	[tender_document_relatedItem],
    [tender_document_relatedLot],
	[tender_document_datePublished],
    tender_document_documentOf,
    IDReleaseOCIDOrig,
    IDTenderOrig
    ,AutoNumber(IDReleaseOCIDOrig, 'IDReleaseOCID') As IDReleaseOCIDKey
    ,AutoNumber(IDTenderOrig, 'IDTender') as IDTenderKey
    ,AutoNumber(tender_document_relatedLot, 'IDLot') as IDLotKey
    ,AutoNumber(tender_document_relatedItem, 'IDItem') as IDItemKey
Resident documents;

drop table documents;

Store TenderDocuments into [$(TRN_QVD_PATH)TenderDocuments.qvd] (qvd);
Drop table TenderDocuments; 


//====Complaints====
[complaints]:
LOAD	[id_u17] AS [complaint_id],
	[status_u2] AS [complaint_status],
	$(vDateConvert([submissionDate])) AS [complaint_submissionDate],
	[type_u0] AS [complaint_type],
	[complaintID] AS [complaint_complaintID],
	[title_u0] AS [complaint_title],
	[description_u0] AS [complaint_description],
	$(vDateConvert([reviewDate])) AS [complaint_reviewDate],
	$(vDateConvert([responseDate])) AS [complaint_responseDate],
	[__KEY_complaints] AS [__KEY_complaints],
	[__FK_complaints] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_complaints]);

//[author_u0]:
left join(complaints)
LOAD	[id_u15] AS [complaint_author_id],
	[__FK_author_u0] AS [__KEY_complaints]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_author_u0]);

left join(complaints) 
LOAD	[id_u10] AS [IDTenderOrig],
	[__KEY_tender] AS [__KEY_tender],
	[__FK_tender] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tender]);

left join(complaints)
LOAD	
    [ocid] AS [IDReleaseOCIDOrig],
    [ocid] AS [IDReleaseOCID],
	[__KEY_root] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

if NOT Isnull( FileSize('$(TRN_QVD_PATH)Complaints.qvd')) THEN
Concatenate (complaints)
load [complaint_id],
	[complaint_status],
	[complaint_submissionDate],
	[complaint_type],
	[complaint_complaintID],
	[complaint_title],
	[complaint_description],
	[complaint_reviewDate],
	[complaint_responseDate],
    [complaint_author_id],
    IDReleaseOCIDOrig,
    IDTenderOrig
FROM [$(TRN_QVD_PATH)Complaints.qvd] (qvd)
where not exists (IDReleaseOCID, IDReleaseOCIDOrig);
ENDIF;

Complaints:
NoConcatenate
Load [complaint_id],
	[complaint_status],
	[complaint_submissionDate],
	[complaint_type],
	[complaint_complaintID],
	[complaint_title],
	[complaint_description],
	[complaint_reviewDate],
	[complaint_responseDate],
    [complaint_author_id],
    IDReleaseOCIDOrig,
    IDTenderOrig
    ,AutoNumber(IDReleaseOCIDOrig, 'IDReleaseOCID') As IDReleaseOCIDKey
    ,AutoNumber(IDTenderOrig, 'IDTender') as IDTenderKey
    ,AutoNumber(complaint_author_id, 'IDcomplaintAuthor') as IDcomplaintAuthorKey
    ,AutoNumber([complaint_id], 'IDComplaint') as IDComplaint
Resident complaints;

drop table complaints;

Store Complaints into [$(TRN_QVD_PATH)Complaints.qvd] (qvd);
Drop table Complaints; 


//====Complaint Documents====
[documents_u0]:
LOAD	[id_u16] AS [complaint_documents_id],
	$(vDateConvert([datePublished_u0])) AS [complaint_documents_datePublished],
	[documentType] AS [complaint_documents_documentType],
	[title] AS [complaint_documents_title],
	[__FK_documents_u0] AS [__KEY_complaints]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_documents_u0]);

//[complaints]:
left join(documents_u0)
LOAD [id_u17] AS [complaint_id],
	[__KEY_complaints] AS [__KEY_complaints],
	[__FK_complaints] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_complaints]);

left join(documents_u0) 
LOAD	[id_u10] AS [IDTenderOrig],
	[__KEY_tender] AS [__KEY_tender],
	[__FK_tender] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tender]);

left join(documents_u0)
LOAD	
    [ocid] AS [IDReleaseOCIDOrig],
    [ocid] AS [IDReleaseOCID],
	[__KEY_root] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

if NOT Isnull( FileSize('$(TRN_QVD_PATH)ComplaintDocuments.qvd')) THEN
Concatenate (documents_u0)
load [complaint_documents_id],
	[complaint_documents_datePublished],
	[complaint_documents_documentType],
	[complaint_documents_title],
    [complaint_id],
    IDReleaseOCIDOrig,
    IDTenderOrig
FROM [$(TRN_QVD_PATH)ComplaintDocuments.qvd] (qvd)
where not exists (IDReleaseOCID, IDReleaseOCIDOrig);
ENDIF;

ComplaintDocuments:
NoConcatenate
Load [complaint_documents_id],
	[complaint_documents_datePublished],
	[complaint_documents_documentType],
	[complaint_documents_title],
    [complaint_id],
    IDReleaseOCIDOrig,
    IDTenderOrig
    ,AutoNumber(IDReleaseOCIDOrig, 'IDReleaseOCID') As IDReleaseOCIDKey
    ,AutoNumber(IDTenderOrig, 'IDTender') as IDTenderKey
    ,AutoNumber([complaint_id], 'IDComplaint') as IDComplaintKey
Resident documents_u0;

drop table documents_u0;

Store ComplaintDocuments into [$(TRN_QVD_PATH)ComplaintDocuments.qvd] (qvd);
Drop table ComplaintDocuments; 


//====lots====

[lots]:
LOAD	[id_u2] AS [IDLotOrig],
	[status] AS [lot_status],
	[__KEY_lots] AS [__KEY_lots],
	[__FK_lots] AS [__KEY_tender]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_lots]);

//[value_u0]:
left join(lots) 
LOAD	[amount_u0] AS [lot_amount],
	[currency_u0] AS [lot_currency],
	[__FK_value_u0] AS [__KEY_lots]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_value_u0]);

left join(lots) 
LOAD	[id_u10] AS [IDTenderOrig],
	[__KEY_tender] AS [__KEY_tender],
	[__FK_tender] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tender]);

left join(lots)
LOAD	
    [ocid] AS [IDReleaseOCIDOrig],
    [ocid] AS [IDReleaseOCID],
	[__KEY_root] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

if NOT Isnull( FileSize('$(TRN_QVD_PATH)Lot.qvd')) THEN
Concatenate (lots)
load [IDLotOrig],
	[lot_status],
    [lot_amount],
	[lot_currency],
	[IDTenderOrig],
	[IDReleaseOCIDOrig]
FROM [$(TRN_QVD_PATH)Lot.qvd] (qvd)
where not exists (IDReleaseOCID, IDReleaseOCIDOrig);
ENDIF;

Lot:
NoConcatenate
Load [IDLotOrig],
	[lot_status],
    [lot_amount],
	[lot_currency],
	[IDTenderOrig],
	[IDReleaseOCIDOrig]
    ,AutoNumber(IDReleaseOCIDOrig, 'IDReleaseOCID') as IDReleaseOCIDKey
    ,AutoNumber(IDTenderOrig, 'IDTender') as IDTenderKey    
    ,AutoNumber(IDLotOrig, 'IDLot') as IDLot
Resident lots;

drop table lots;

Store Lot into [$(TRN_QVD_PATH)Lot.qvd] (qvd);
Drop table Lot; 


//====Items====
[items]:
LOAD	[id_u5] AS [IDItemOrig],
	[relatedLot] AS [items_relatedLot],
	[quantity] AS [items_quantity],
	[__KEY_items] AS [__KEY_items],
	[__FK_items] AS [__KEY_tender]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_items]);

//[classification]:
left join(items)
LOAD	[scheme_u0] AS [items_classification_scheme],
	[id_u3] AS [items_classification_id],
	[__FK_classification] AS [__KEY_items]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_classification]);

left join(items) 
LOAD	[id_u10] AS [IDTenderOrig],
	[__KEY_tender] AS [__KEY_tender],
	[__FK_tender] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tender]);

left join(items)
LOAD	
    [ocid] AS [IDReleaseOCIDOrig],
    [ocid] AS [IDReleaseOCID],
	[__KEY_root] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

[unit]:
LOAD	[id_u4] AS [items_unit_id],
	[name_u0] AS [items_unit_name],
	[__KEY_unit] AS [__KEY_unit],
	[__FK_unit] AS [__KEY_items]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_unit]);

//[value_u1]:
left join(unit)
LOAD	[amount_u1] AS [items_unit_value_amount],
	[currency_u1] AS [items_unit_value_currency],
	[__FK_value_u1] AS [__KEY_unit]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_value_u1]);

left join(items)
Load [__KEY_items],
	 items_unit_id,
     items_unit_name,
     items_unit_value_amount,
     items_unit_value_currency
Resident unit;

drop table unit;

if NOT Isnull( FileSize('$(TRN_QVD_PATH)Items.qvd')) THEN
Concatenate (items)
load [IDItemOrig],
	[items_relatedLot],
	[items_quantity],
    [items_classification_id],
    items_classification_scheme,
	[IDTenderOrig],
	[IDReleaseOCIDOrig],
     items_unit_id,
     items_unit_name,
     items_unit_value_amount,
     items_unit_value_currency
FROM [$(TRN_QVD_PATH)Items.qvd] (qvd)
where not exists (IDReleaseOCID, IDReleaseOCIDOrig);
ENDIF;

Items:
NoConcatenate
Load  [IDItemOrig],
	[items_relatedLot],
	[items_quantity],
    [items_classification_id],
    items_classification_scheme,
	[IDTenderOrig],
	[IDReleaseOCIDOrig],
     items_unit_id,
     items_unit_name,
     items_unit_value_amount,
     items_unit_value_currency
    ,AutoNumber(IDReleaseOCIDOrig, 'IDReleaseOCID') as IDReleaseOCIDKey
    ,AutoNumber(IDTenderOrig, 'IDTender') as IDTenderKey    
    ,AutoNumber(items_relatedLot, 'IDLot') as IDLotKey
    ,AutoNumber(IDItemOrig, 'IDItem') as IDItem
Resident items;

drop table items;

Store Items into [$(TRN_QVD_PATH)Items.qvd] (qvd);
Drop table Items; 


//====Bids====
[details]:
LOAD	[id_u14] AS [IDBidOrig],
	[status_u1] AS [bid_status],
	$(vDateConvert([date_u1])) AS [bid_date],
    $(vFloorDateConvert(dateDisclosed)) AS dateDisclosed,
    $(vDateConvert(dateDisclosed)) AS dateTimeDisclosed,
	[__KEY_details] AS [__KEY_details],
	[__FK_details] AS [__KEY_bids]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_details]);

//[bids]:
left join(details)
LOAD	[__KEY_bids] AS [__KEY_bids],
	[__FK_bids] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_bids]);

//[tenderers]:
left join(details)
LOAD	[id_u13] AS [IDtendererOrig],
	[__FK_tenderers] AS [__KEY_details]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tenderers]);

left join(details)
LOAD	
    [ocid] AS [IDReleaseOCIDOrig],
    [ocid] AS [IDReleaseOCID],
	[__KEY_root] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

left join(details) 
LOAD	[id_u10] AS [IDTenderOrig],
	[__KEY_tender] AS [__KEY_tender],
	[__FK_tender] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tender]);

if NOT Isnull( FileSize('$(TRN_QVD_PATH)Bids.qvd')) THEN
Concatenate (details)
load [IDBidOrig],
	[bid_status],
	[bid_date],
    dateDisclosed,
    dateTimeDisclosed,
	[IDtendererOrig],
	[IDTenderOrig],
	[IDReleaseOCIDOrig]
FROM [$(TRN_QVD_PATH)Bids.qvd] (qvd)
where not exists (IDReleaseOCID, IDReleaseOCIDOrig);
ENDIF;

Bids:
NoConcatenate
Load  [IDBidOrig],
	[bid_status],
	[bid_date],
    dateDisclosed,
    dateTimeDisclosed,
	[IDtendererOrig],
	[IDTenderOrig],
	[IDReleaseOCIDOrig]
    ,AutoNumber(IDReleaseOCIDOrig, 'IDReleaseOCID') as IDReleaseOCIDKey
    ,AutoNumber(IDTenderOrig, 'IDTender') as IDTenderKey    
    ,AutoNumber(IDBidOrig, 'IDBid') as IDBid
    ,AutoNumber(IDtendererOrig, 'IDtenderer') as IDtendererKey
Resident details;

drop table details;

Store Bids into [$(TRN_QVD_PATH)Bids.qvd] (qvd);
Drop table Bids; 


//====Bids Related Lots====

[relatedLots]:
LOAD	[id_u11] AS [bids_relatedLots_id],
	[__KEY_relatedLots] AS [__KEY_relatedLots],
	[__FK_relatedLots] AS [__KEY_details]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_relatedLots]);

//[value_u2]:
left join(relatedLots)
LOAD	[amount_u2] AS [bids_relatedLots_amount],
	[currency_u2] AS [bids_relatedLots_currency],
	[__FK_value_u2] AS [__KEY_relatedLots]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_value_u2]);

Left join(relatedLots)
LOAD	[id_u14] AS [IDBidOrig],
	[__KEY_details] AS [__KEY_details],
	[__FK_details] AS [__KEY_bids]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_details]);

left join(relatedLots)
LOAD	[__KEY_bids] AS [__KEY_bids],
	[__FK_bids] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_bids]);

left join(relatedLots) 
LOAD	[id_u10] AS [IDTenderOrig],
	[__KEY_tender] AS [__KEY_tender],
	[__FK_tender] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tender]);

left join(relatedLots)
LOAD	
    [ocid] AS [IDReleaseOCIDOrig],
    [ocid] AS [IDReleaseOCID],
	[__KEY_root] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

if NOT Isnull( FileSize('$(TRN_QVD_PATH)BidsRelatedLots.qvd')) THEN
Concatenate (relatedLots)
load [IDBidOrig],
	[bids_relatedLots_amount],
	[bids_relatedLots_currency],
    [bids_relatedLots_id],
	[IDTenderOrig],
	[IDReleaseOCIDOrig]
FROM [$(TRN_QVD_PATH)BidsRelatedLots.qvd] (qvd)
where not exists (IDReleaseOCID, IDReleaseOCIDOrig);
ENDIF;

BidsRelatedLots:
NoConcatenate
Load  [IDBidOrig],
	[bids_relatedLots_amount],
	[bids_relatedLots_currency],
    [bids_relatedLots_id],
	[IDTenderOrig],
	[IDReleaseOCIDOrig]
    ,AutoNumber(IDReleaseOCIDOrig, 'IDReleaseOCID') as IDReleaseOCIDKey
    ,AutoNumber(IDTenderOrig, 'IDTender') as IDTenderKey    
    ,AutoNumber(IDBidOrig, 'IDBid') as IDBidKey
    ,AutoNumber(bids_relatedLots_id, 'IDLot') as IDLotKey
    ,AutoNumber(IDBidOrig&'|'&bids_relatedLots_id, 'IDLotBid') as IDLotBidKey
//    ,IDBidOrig&'|'&bids_relatedLots_id as IDLotBidOrig
Resident relatedLots;

drop table relatedLots;

Store BidsRelatedLots into [$(TRN_QVD_PATH)BidsRelatedLots.qvd] (qvd);
Drop table BidsRelatedLots; 


//====Bids Price Proposals====
[priceProposals]:
LOAD	[id_u12] AS [IDPriceProposalOrig],
	[relatedLot_u1] AS [priceProposals_relatedLot],
	[relatedItem_u0] AS [priceProposals_relatedItem],
	[__KEY_priceProposals] AS [__KEY_priceProposals],
	[__FK_priceProposals] AS [__KEY_details]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_priceProposals]);

[unit_u0]:
LOAD	[__KEY_unit_u0] AS [__KEY_unit_u0],
	[__FK_unit_u0] AS [__KEY_priceProposals]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_unit_u0]);

//[value_u3]:
left join(unit_u0)
LOAD	[amount_u3] AS [priceProposal_amount],
	[currency_u3] AS [priceProposal_currency],
	[__FK_value_u3] AS [__KEY_unit_u0]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_value_u3]);

left join(priceProposals)
Load [__KEY_priceProposals], 
	if(len(priceProposal_amount)>14 AND IsNull(Frac(priceProposal_amount)), NUM(left(priceProposal_amount, 14)) * Pow(10, len(priceProposal_amount)-14) + NUM(right(priceProposal_amount, len(priceProposal_amount)-14)), priceProposal_amount) as priceProposal_amount,
    priceProposal_amount as priceProposal_amountOrig, // ^^^Processing a situation with the number of digits of a number greater than 14^^^
	[priceProposal_currency]
Resident unit_u0;

drop table unit_u0;

Left join(priceProposals)
LOAD	[id_u14] AS [IDBidOrig],
	[__KEY_details] AS [__KEY_details],
	[__FK_details] AS [__KEY_bids]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_details]);

left join(priceProposals)
LOAD	[__KEY_bids] AS [__KEY_bids],
	[__FK_bids] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_bids]);

left join(priceProposals) 
LOAD	[id_u10] AS [IDTenderOrig],
	[__KEY_tender] AS [__KEY_tender],
	[__FK_tender] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tender]);

left join(priceProposals)
LOAD	
    [ocid] AS [IDReleaseOCIDOrig],
    [ocid] AS [IDReleaseOCID],
	[__KEY_root] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

if NOT Isnull( FileSize('$(TRN_QVD_PATH)PriceProposals.qvd')) THEN
Concatenate (priceProposals)
load 
	[IDPriceProposalOrig],
	[priceProposals_relatedItem],
	[priceProposals_relatedLot],
    [priceProposal_amount],
    priceProposal_amountOrig,
	[priceProposal_currency],
    [IDBidOrig],
	[IDTenderOrig],
	[IDReleaseOCIDOrig]
FROM [$(TRN_QVD_PATH)PriceProposals.qvd] (qvd)
where not exists (IDReleaseOCID, IDReleaseOCIDOrig);
ENDIF;

PriceProposals:
NoConcatenate
Load
	[IDPriceProposalOrig],
	[priceProposals_relatedItem],
	[priceProposals_relatedLot],
    [priceProposal_amount],
    priceProposal_amountOrig,
	[priceProposal_currency],
	[IDBidOrig],
	[IDTenderOrig],
	[IDReleaseOCIDOrig]
    ,AutoNumber(IDReleaseOCIDOrig, 'IDReleaseOCID') as IDReleaseOCIDKey
    ,AutoNumber(IDTenderOrig, 'IDTender') as IDTenderKey    
    ,AutoNumber(IDBidOrig, 'IDBid') as IDBidKey
    ,AutoNumber(priceProposals_relatedLot, 'IDLot') as IDLotKey
    ,AutoNumber(priceProposals_relatedItem, 'IDItem') as IDItemKey
    ,AutoNumber(IDBidOrig&'|'&priceProposals_relatedLot, 'IDLotBid') as IDLotBidKey
Resident priceProposals;

drop table priceProposals;

Store PriceProposals into [$(TRN_QVD_PATH)PriceProposals.qvd] (qvd);
Drop table PriceProposals; 


//====related Processes====
[relatedProcesses]:
LOAD	[relationship] AS [relatedProcess_relationship],
	[identifier] AS [relatedProcess_identifier],
	[__FK_relatedProcesses] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_relatedProcesses]);

left join(relatedProcesses) 
LOAD	[id_u10] AS [IDTenderOrig],
	[__KEY_tender] AS [__KEY_tender],
	[__FK_tender] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tender]);

left join(relatedProcesses)
LOAD	
    [ocid] AS [IDReleaseOCIDOrig],
    [ocid] AS [IDReleaseOCID],
	[__KEY_root] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

if NOT Isnull( FileSize('$(TRN_QVD_PATH)RelatedProcesses.qvd')) THEN
Concatenate (relatedProcesses)
load 
	[relatedProcess_relationship],
	[relatedProcess_identifier],
	[IDTenderOrig],
	[IDReleaseOCIDOrig]
FROM [$(TRN_QVD_PATH)RelatedProcesses.qvd] (qvd)
where not exists (IDReleaseOCID, IDReleaseOCIDOrig);
ENDIF;

RelatedProcesses:
NoConcatenate
Load
	[relatedProcess_relationship],
	[relatedProcess_identifier],
	[IDTenderOrig],
	[IDReleaseOCIDOrig]
    ,AutoNumber(IDReleaseOCIDOrig, 'IDReleaseOCID') as IDReleaseOCIDKey
    ,AutoNumber(IDTenderOrig, 'IDTender') as IDTenderKey    
Resident relatedProcesses;

drop table relatedProcesses;

Store RelatedProcesses into [$(TRN_QVD_PATH)RelatedProcesses.qvd] (qvd);
Drop table RelatedProcesses; 


//====Awards====
[awards]:
LOAD	[id_u18] AS [IDAwardOrig],
	[status_u3] AS [award_status],
//	[relatedLot_u2] AS [award_relatedLot],
	[relatedBid] AS [award_relatedBid],
	$(vDateConvert([datePublished_u1])) AS [award_date],
	[__KEY_awards] AS [__KEY_awards],
	[__FK_awards] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_awards]);

Left Join (awards)
Load Distinct
	[@Value_u2] AS [award_relatedLot],
	[__FK_relatedLots_u0] AS [__KEY_awards]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_relatedLots_u0]); 

//[value_u4]:
left join(awards)
LOAD	[amount_u4] AS [award_amount],
	[currency_u4] AS [award_currency],
	[__FK_value_u4] AS [__KEY_awards]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_value_u4]);

left join(awards) 
LOAD	[id_u10] AS [IDTenderOrig],
	[__KEY_tender] AS [__KEY_tender],
	[__FK_tender] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tender]);

left join(awards)
LOAD	
    [ocid] AS [IDReleaseOCIDOrig],
    [ocid] AS [IDReleaseOCID],
	[__KEY_root] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

if NOT Isnull( FileSize('$(TRN_QVD_PATH)Awards.qvd')) THEN
Concatenate (awards)
load 
	[IDAwardOrig],
	[award_status],
	[award_relatedLot],
	[award_relatedBid],
	[award_date],
    [award_amount],
	[award_currency],
	[IDTenderOrig],
	[IDReleaseOCIDOrig]
FROM [$(TRN_QVD_PATH)Awards.qvd] (qvd)
where not exists (IDReleaseOCID, IDReleaseOCIDOrig);
ENDIF;

Awards:
NoConcatenate
Load
	[IDAwardOrig],
	[award_status],
	[award_relatedLot],
	[award_relatedBid],
	[award_date],
    [award_amount],
	[award_currency],
	[IDTenderOrig],
	[IDReleaseOCIDOrig]
    ,AutoNumber(IDReleaseOCIDOrig, 'IDReleaseOCID') as IDReleaseOCIDKey
    ,AutoNumber(IDTenderOrig, 'IDTender') as IDTenderKey   
    ,AutoNumber(award_relatedLot, 'IDLot') as IDLotKey
    ,AutoNumber(award_relatedBid, 'IDBid') as IDBidKey
    ,AutoNumber(IDAwardOrig, 'IDAward') as IDAward
    ,AutoNumber(award_relatedBid&'|'&award_relatedLot, 'IDLotBid') as IDLotBidKey
Resident awards;

drop table awards;

Store Awards into [$(TRN_QVD_PATH)Awards.qvd] (qvd);
Drop table Awards; 


//====Contract Awards====

[awardIDs]:
LOAD Distinct	
	[@Value_u0] AS [IDAwardOrig],
	[__FK_awardIDs] AS [__KEY_contracts]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_awardIDs]);


//[contracts]:
left join(awardIDs)
LOAD Distinct	
	[id_u20] AS [IDContractOrig],
	[__KEY_contracts] AS [__KEY_contracts],
	[__FK_contracts] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_contracts]);

left join(awardIDs) 
LOAD	[id_u10] AS [IDTenderOrig],
	[__KEY_tender] AS [__KEY_tender],
	[__FK_tender] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tender]);

left join(awardIDs)
LOAD	
    [ocid] AS [IDReleaseOCIDOrig],
    [ocid] AS [IDReleaseOCID],
	[__KEY_root] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

if NOT Isnull( FileSize('$(TRN_QVD_PATH)ContractAwards.qvd')) THEN
Concatenate (awardIDs)
load 
	[IDAwardOrig],
	[IDContractOrig],
	[IDTenderOrig],
	[IDReleaseOCIDOrig]
FROM [$(TRN_QVD_PATH)ContractAwards.qvd] (qvd)
where not exists (IDReleaseOCID, IDReleaseOCIDOrig);
ENDIF;

ContractAwards:
NoConcatenate
Load
	[IDAwardOrig],
	[IDContractOrig],
	[IDTenderOrig],
	[IDReleaseOCIDOrig]
    ,AutoNumber(IDReleaseOCIDOrig, 'IDReleaseOCID') as IDReleaseOCIDKey
    ,AutoNumber(IDTenderOrig, 'IDTender') as IDTenderKey   
    ,AutoNumber(IDAwardOrig, 'IDAward') as IDAwardKey
    ,AutoNumber(IDContractOrig, 'IDContract') as IDContractKey
Resident awardIDs;

drop table awardIDs;

Store ContractAwards into [$(TRN_QVD_PATH)ContractAwards.qvd] (qvd);
Drop table ContractAwards; 


//====Contracts====
[contracts]:
LOAD	[id_u20] AS [IDContractOrig],
	[status_u4] AS [contract_status],
	$(vDateConvert([date_u3])) AS [contract_date],
	$(vDateConvert([dateSigned])) AS [contract_dateSigned],
    $(vFloorDateConvert([dateSigned])) AS [contract_date_Signed],
	[__KEY_contracts] AS [__KEY_contracts],
	[__FK_contracts] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_contracts]);

//[value_u5]:
left join(contracts)
LOAD	[amount_u5] AS [contract_amount],
	[currency_u5] AS [contract_currency],
	[__FK_value_u5] AS [__KEY_contracts]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_value_u5]);

left join(contracts) 
LOAD	[id_u10] AS [IDTenderOrig],
	[__KEY_tender] AS [__KEY_tender],
	[__FK_tender] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tender]);

left join(contracts)
LOAD	
    [ocid] AS [IDReleaseOCIDOrig],
    [ocid] AS [IDReleaseOCID],
	[__KEY_root] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

if NOT Isnull( FileSize('$(TRN_QVD_PATH)Contracts.qvd')) THEN
Concatenate (contracts)
load 
	[IDContractOrig],
	[contract_status],
	[contract_date],
	[contract_dateSigned],
    [contract_date_Signed],
    [contract_amount],
	[contract_currency],
	[IDTenderOrig],
	[IDReleaseOCIDOrig]
FROM [$(TRN_QVD_PATH)Contracts.qvd] (qvd)
where not exists (IDReleaseOCID, IDReleaseOCIDOrig);
ENDIF;

Contracts:
NoConcatenate
Load
	[IDContractOrig],
	[contract_status],
	[contract_date],
	[contract_dateSigned],
    [contract_date_Signed],
    [contract_amount],
	[contract_currency],
	[IDTenderOrig],
	[IDReleaseOCIDOrig]
    ,AutoNumber(IDReleaseOCIDOrig, 'IDReleaseOCID') as IDReleaseOCIDKey
    ,AutoNumber(IDTenderOrig, 'IDTender') as IDTenderKey   
    ,AutoNumber(IDContractOrig, 'IDContract') as IDContract
Resident contracts;

drop table contracts;

Store Contracts into [$(TRN_QVD_PATH)Contracts.qvd] (qvd);
Drop table Contracts; 


//====Contract Items====
[items_u0]:
LOAD	[id_u19] AS [contract_items_id],
	[relatedLot_u3] AS [contract_items_relatedLot],
	[__FK_items_u0] AS [__KEY_contracts]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_items_u0]);

//[contracts]:
left join(items_u0)
LOAD	[id_u20] AS [IDContractOrig],
	[__KEY_contracts] AS [__KEY_contracts],
	[__FK_contracts] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_contracts]);

left join(items_u0) 
LOAD	[id_u10] AS [IDTenderOrig],
	[__KEY_tender] AS [__KEY_tender],
	[__FK_tender] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tender]);

left join(items_u0)
LOAD	
    [ocid] AS [IDReleaseOCIDOrig],
    [ocid] AS [IDReleaseOCID],
	[__KEY_root] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

if NOT Isnull( FileSize('$(TRN_QVD_PATH)ContractItems.qvd')) THEN
Concatenate (items_u0)
load 
	[contract_items_id],
	[contract_items_relatedLot],
    [IDContractOrig],
	[IDTenderOrig],
	[IDReleaseOCIDOrig]
FROM [$(TRN_QVD_PATH)ContractItems.qvd] (qvd)
where not exists (IDReleaseOCID, IDReleaseOCIDOrig);
ENDIF;

ContractItems:
NoConcatenate
Load
	[contract_items_id],
	[contract_items_relatedLot],
    [IDContractOrig],
	[IDTenderOrig],
	[IDReleaseOCIDOrig]
    ,AutoNumber(IDReleaseOCIDOrig, 'IDReleaseOCID') as IDReleaseOCIDKey
    ,AutoNumber(IDTenderOrig, 'IDTender') as IDTenderKey   
    ,AutoNumber(IDContractOrig, 'IDContract') as IDContractKey
    ,AutoNumber(contract_items_relatedLot, 'IDLot') as IDLotKey
    ,AutoNumber(contract_items_id, 'IDItem') as IDItemKey
Resident items_u0;

drop table items_u0;

Store ContractItems into [$(TRN_QVD_PATH)ContractItems.qvd] (qvd);
Drop table ContractItems; 




// //========2. Dictionaries========

[parties]:
LOAD Distinct	
	[id_u0] AS [IDParty],
	[__KEY_parties] AS [__KEY_parties],
	[__FK_parties] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_parties]);

//[identifier]:
left join(parties)
LOAD Distinct	
	[scheme] AS [parties_scheme],
	[id] AS [parties_id],
	[legalName] AS [parties_legalName],
	[legalName_ru] AS [parties_legalName_ru],
	[legalName_kg] AS [parties_legalName_kg],
	[__FK_identifier] AS [__KEY_parties]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_identifier]);

//[address]:
left join(parties)
LOAD Distinct	
	[ateCode] AS [parties_ateCode],
	[countryName] AS [parties_countryName],
	[region] AS [parties_region],
	[subregion] AS [parties_subregion],
	[district] AS [parties_district],
	[subdistrict] AS [parties_subdistrict],
	[subsubdistrict] AS [parties_subsubdistrict],
	[locality] AS [parties_locality],
	[streetAddress] AS [parties_streetAddress],
	[__FK_address] AS [__KEY_parties]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_address]);

//[roles]:
left join(parties)
LOAD Distinct	
	[@Value] AS [parties_role],
	[__FK_roles] AS [__KEY_parties]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_roles]);

// left join(parties)
// Load [__KEY_parties],
// 	 [IDParty]&'|'&[parties_role] as parties_complexKeyForCP
// Resident parties;

left join(parties)
LOAD Distinct
	$(vDateConvert([date_u4])) AS [parties_latestRelease_date],
	[__KEY_root] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

[contactPoints]:
LOAD Distinct	
	[name] AS [parties_CP_name],
	[email] AS [parties_CP_email],
	[telephone] AS [parties_CP_telephone],
	[role] AS [parties_CP_role],
	[__FK_contactPoints] AS [__KEY_parties]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_contactPoints]);

//[parties]:
left join(contactPoints)
LOAD Distinct	
	[id_u0] AS [IDParty],
	[__KEY_parties] AS [__KEY_parties],
	[__FK_parties] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_parties]);

left join(contactPoints)
LOAD Distinct	
	[@Value] AS [parties_role],
	[__FK_roles] AS [__KEY_parties]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_roles]);

// left join(contactPoints)
// Load distinct
// 	 [__KEY_parties],
// 	 [IDParty]&'|'&[parties_role] as parties_complexKeyForCP
// Resident contactPoints;

left join(contactPoints)
LOAD Distinct
	$(vDateConvert([date_u4])) AS [contactPoint_latestRelease_date],
	[__KEY_root] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

for each vParty in 'buyer', 'complainer', 'enquirer', 'procuringEntity', 'reviewBody', 'supplier', 'tenderer'//FieldValueList('parties_role')

  trace $(vParty);

  CALL Parties('$(vParty)');

next vParty;

drop tables parties, contactPoints;

//Additional table listing allowerdTenderer for each procedure
[tender_allowedTenderers]:
LOAD	//[@Value] AS [@Value],
	[__FK_roles] AS [__KEY_parties]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_roles])
AND [@Value] = 'allowedTenderer'
;

left join(tender_allowedTenderers)
//[parties]:
LOAD	[id_u0] AS [IDallowedTendererOrig],
	[__KEY_parties] AS [__KEY_parties],
	[__FK_parties] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_parties]);

left join(tender_allowedTenderers)
LOAD	[id_u10] AS [IDTenderOrig],
	[procurementMethodDetails] AS [tender_procurementMethodDetails],
	[__KEY_tender] AS [__KEY_tender],
	[__FK_tender] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_tender]);

left join(tender_allowedTenderers)
LOAD	
    [ocid] AS [IDReleaseOCIDOrig],
    [ocid] AS [IDReleaseOCID],
	[__KEY_root] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__KEY_root]);

if NOT Isnull( FileSize('$(TRN_QVD_PATH)Tender_allowedTenderers.qvd')) THEN
Concatenate (tender_allowedTenderers)
load 
	IDallowedTendererOrig,
	[IDTenderOrig],
	[IDReleaseOCIDOrig]
FROM [$(TRN_QVD_PATH)Tender_allowedTenderers.qvd] (qvd)
where not exists (IDReleaseOCID, IDReleaseOCIDOrig);
ENDIF;

Tender_allowedTenderers:
NoConcatenate
Load
	IDallowedTendererOrig,
	[IDTenderOrig],
	[IDReleaseOCIDOrig]
    ,AutoNumber(IDReleaseOCIDOrig, 'IDReleaseOCID') as IDReleaseOCIDKey
    ,AutoNumber(IDTenderOrig, 'IDTender') as IDTenderKey   
    ,AutoNumber(IDallowedTendererOrig, 'IDallowedTenderer') as IDallowedTendererKey
Resident tender_allowedTenderers;

drop table tender_allowedTenderers;

Store Tender_allowedTenderers into [$(TRN_QVD_PATH)Tender_allowedTenderers.qvd] (qvd);
Drop table Tender_allowedTenderers; 


DROP TABLE RestConnectorMasterTable;

// If updating data without errors - save a new Offset,
// otherwise, at the next reboot, update data from the old Offset

OffsetTable:
NoConcatenate
LOAD 
	 LastValue(OffsetDateTime) as OffsetDateTime
Resident TenderHeaders;	 

STORE OffsetTable INTO  [$(DIC_QVD_PATH)OffsetTable.txt] (txt); 
DROP Table OffsetTable;

DROP Table TenderHeaders;

//
NEXT vBatchNo;
//

DROP Table BatchTable;