//Main
//TT https://docs.google.com/spreadsheets/d/1Acs9z7wyoM333Go6ZpSQqtlb5Ik6EF9Gki34w3soU0E/edit#gid=2012078435
SET ThousandSep=' ';
SET DecimalSep=',';
SET MoneyThousandSep=' ';
SET MoneyDecimalSep=',';
SET MoneyFormat='# ##0,00 ⊆;-# ##0,00 ⊆';
SET TimeFormat='hh:mm:ss';
SET DateFormat='DD.MM.YYYY';
SET TimestampFormat='DD.MM.YYYY hh:mm:ss[.fff]';
SET FirstWeekDay=0;
SET BrokenWeeks=1;
SET ReferenceDay=0;
SET FirstMonthOfYear=1;
SET CollationLocale='ru-RU';
SET CreateSearchIndexOnReload=0;
SET MonthNames='янв.;февр.;мар.;апр.;мая;июн.;июл.;авг.;сент.;окт.;нояб.;дек.';
SET LongMonthNames='январь;февраль;март;апрель;май;июнь;июль;август;сентябрь;октябрь;ноябрь;декабрь';
SET DayNames='пн;вт;ср;чт;пт;сб;вс';
SET LongDayNames='понедельник;вторник;среда;четверг;пятница;суббота;воскресенье';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:μ;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';

SET DIC_QVD_PATH = 'lib://OCDSKGData/02_QVD_DB/01_Dictionary_Plan/';
SET TRN_QVD_PATH = 'lib://OCDSKGData/02_QVD_DB/02_Transaction_Plan/';
SET FILES_PATH = 'lib://OCDSKGData/01_DataFiles/';
SET LOCAL_FILES_PATH = 'lib://OCDSKGData/03_LocalFiles/';

SET vBaseURL = 'http://192.168.17.10:8112/api/planning'; 
SET vOffsetNo = '?offset=';
SET vOffsetBase = 0;
SET vPageNo = '&page=';
SET vPageNoBase = 0;

SET vPageSize = '&size=100';

SET vStep = 10;

// 1. Procedures
BoolMap:
Mapping
Load * Inline [
BoolValue, BoolValueNum
true,	   1
false,	   0
];

SET vBoolConvert = "ApplyMap('BoolMap', Lower($1), $2)";


SET vDateConvert = "TimeStamp(ConvertToLocalTime($1))";
SET vFloorDateConvert = "Date(Floor(ConvertToLocalTime($1)))";

/2. Store dictionaries
CPVClassification:
LOAD Distinct
    F1 as IDClassCPVOrig,
    F2 as CPVClassNameRu,
    if(Len(F3)<3, F2, F3) as CPVClassNameEn,
    if(Len(F4)<3, F2, F4) as CPVClassNameKg
FROM [lib://OCDSKG_dictionaries]
(html, utf8, embedded labels, table is @1);

Store CPVClassification into [$(DIC_QVD_PATH)CPVClassification.qvd] (qvd);
Drop table CPVClassification; 

Region_Dictionaries:
LOAD Distinct
    F1 as RegionRu,
    F2 as RegionEn,
    F3 as RegionKg
FROM [lib://OCDSKG_dictionaries]
(html, utf8, embedded labels, table is @1, url is 'https://docs.google.com/spreadsheets/u/1/d/***')
Where F1<>'Ru' AND Len(F1)>0;

Store Region_Dictionaries into [$(DIC_QVD_PATH)Region_Dictionaries.qvd] (qvd);
Drop table Region_Dictionaries;

Multilang_Dictionaries:
LOAD
    Index,
    Reference,
    Ru,
    En,
    Kg,
    attributeOf
FROM [lib://OCDSKG_dictionaries]
(html, utf8, embedded labels, table is @1, url is 'https://docs.google.com/spreadsheets/u/1/d/***')
Where Index <> 'Index' AND Len(Index)>0;

Store Multilang_Dictionaries into [$(DIC_QVD_PATH)Multilang_Dictionaries.qvd] (qvd);
Drop Table Multilang_Dictionaries;

Set Verbatim = 1; // To load field records as names of new fields that have multiple spaces

Multilang_Labels:
LOAD
    F1 as "Index",
    F2 as Reference,
    F3 as Ru,
    F4 as En,
    F5 as Kg
FROM [lib://OCDSKG_dictionaries]
(html, utf8, embedded labels, table is @1, url is 'https://docs.google.com/spreadsheets/u/1/d/***')
where F1 <> 'Index' AND Len(F1)>0;

Store Multilang_Labels into [$(DIC_QVD_PATH)Multilang_Labels.qvd] (qvd);
Drop Table Multilang_Labels;

Multilang_FieldNames:
LOAD
    F1 as Index,
    F2 as Reference,
    F3 as Ru,
    F4 as En,
    F5 as Kg
FROM [lib://OCDSKG_dictionaries]
(html, utf8, embedded labels, table is @1, url is 'https://docs.google.com/spreadsheets/u/1/d/***')
Where F1 <> 'Index' AND Len(F1)>0;

Store Multilang_FieldNames into [$(DIC_QVD_PATH)Multilang_FieldNames.qvd] (qvd);
Drop Table Multilang_FieldNames;

// Sheet and object descriptions
TranslationsHelp:
LOAD 
    Index,
    Ru,
    En,
    Kg
FROM [lib://OCDSKG_dictionaries]
(html, utf8, embedded labels, table is @1, url is 'https://docs.google.com/spreadsheets/u/1/d/***')
Where Len(Index)>0;

Store TranslationsHelp into [$(DIC_QVD_PATH)TranslationsHelp.qvd] (qvd);
Drop Table TranslationsHelp;

//3. HeaderPlanID
IF NOT IsNull(FileSize('$(DIC_QVD_PATH)OffsetTablePlan.txt')) THEN
    OffsetTablePlan:
    LOAD 
          OffsetDateTime
    FROM
    [$(DIC_QVD_PATH)OffsetTablePlan.txt]
    (txt, utf8, embedded labels, delimiter is ',', msq);

    LET vCurrentReloadSessionOffset = Peek('OffsetDateTime', -1, 'OffsetTablePlan');

    DROP Table OffsetTablePlan;

    ELSE

    LET vCurrentReloadSessionOffset = vOffsetBase;
ENDIF

LET vURL = vBaseURL&vOffsetNo&vCurrentReloadSessionOffset&vPageNo&vPageNoBase&vPageSize;

PlanHeadersAll:
LOAD * Inline [
PlanId, PlanModificateDateTime, OffsetDateTime
];

LIB CONNECT TO 'OCDSKGPlan';

DO
    TRACE $(vURL);

    RestConnectorMasterTable:
    SQL SELECT 
        "totalPages",
        "totalElements",
        "last",
        "first",
        "number",
        "numberOfElements",
        "size",
        "empty" AS "empty_u1",
        "__KEY_root",
        (SELECT 
            "id",
            "date",
            "__FK_content"
        FROM "content" FK "__FK_content"),
        (SELECT 
            "pageSize",
            "pageNumber",
            "offset",
            "paged",
            "unpaged",
            "__KEY_pageable",
            "__FK_pageable"
        FROM "pageable" PK "__KEY_pageable" FK "__FK_pageable")
    FROM JSON (wrap on) "root" PK "__KEY_root"
    WITH CONNECTION(URL "$(vURL)");

    PlanHeadersTmp:
    LOAD	
        [id] as PlanId,
        [date]
    //	[__FK_content] AS [__KEY_root]
    RESIDENT RestConnectorMasterTable
    WHERE NOT IsNull([__FK_content]);


    [pageable]:
    LOAD	
        [pageNumber]
    //     [pageSize],
    // 	[offset],
    // 	[paged],
    // 	[unpaged],
    // 	[__KEY_pageable],
    // 	[__FK_pageable] AS [__KEY_root]
    RESIDENT RestConnectorMasterTable
    WHERE NOT IsNull([__FK_pageable]);


    [root]:
    LOAD	
        [totalElements],
        $(vBoolConvert([last], 0)) AS last
    //	[totalPages],
    // 	[first],
    // 	[number],
    // 	[numberOfElements],
    // 	[size],
    //	[empty_u1] AS [empty_u1],
    //	[__KEY_root]
    RESIDENT RestConnectorMasterTable
    WHERE NOT IsNull([__KEY_root]);


    DROP TABLE RestConnectorMasterTable;

    LET vTotalElements = Peek('totalElements', -1, 'root');

    IF $(vTotalElements) = 0 THEN
        TRACE 'No new releases';
        Exit Script;
    ENDIF

    LET vIsLastPage = Peek('last', -1, 'root');

    LET vNextPageNumber = num(Peek('pageNumber', -1, 'pageable'))+1;

    LET vRowsQtyPlanHeaders = NoOfRows('PlanHeadersTmp');

    IF $(vRowsQtyPlanHeaders) > 0 THEN
        Concatenate (PlanHeadersAll)
        LOAD Distinct
              PlanId,
              $(vDateConvert(date)) as PlanModificateDateTime,
              date as OffsetDateTime,
              '$(vURL)' as PHUri
        Resident PlanHeadersTmp;	
    ENDIF

    DROP Tables PlanHeadersTmp, root, pageable;

    TRACE $(vNextPageNumber);

    LET vURL = vBaseURL&vOffsetNo&vCurrentReloadSessionOffset&vPageNo&vNextPageNumber&vPageSize;
//    SLEEP 300;
//    STORE PlanHeadersAll into [$(FILES_PATH)PlanHeadersAll.qvd] (qvd); 
LOOP WHILE $(vIsLastPage) <> 1

STORE PlanHeadersAll into [$(FILES_PATH)PlanHeadersAll.qvd] (qvd); // For Debug

//3.1. PlanID

PlanHeaders:
NoConcatenate
LOAD 
	PlanId,
	LastValue(PlanModificateDateTime) as PlanModificateDateTime,
	LastValue(OffsetDateTime) as OffsetDateTime,
    LastValue(PHUri) as PHUri
Resident PlanHeadersAll	
Group by PlanId
Order By PlanModificateDateTime;

DROP Table PlanHeadersAll;

LET vAllRowsQty = NoOfRows('PlanHeaders');

IF vAllRowsQty = 0 THEN
    TRACE WARNING! No plans changed;
    EXIT SCRIPT;
ENDIF

PlanHeadersBase:
LOAD 
	 PlanId as PlanIdBase, 
     PlanModificateDateTime as PlanModificateDateTimeBase,
     OffsetDateTime as OffsetDateTimeBase,
     PHUri as PHUriBase,
     if(Previous(PHUri)=PHUri, Peek('BatchNo'),  RangeSum(Peek('BatchNo'), 1) ) as BatchNo
Resident  PlanHeaders
Order by PlanModificateDateTime;   

DROP Table PlanHeaders;

BatchTable:
LOAD 	 
	 Only(BatchNo) as Batch
Resident PlanHeadersBase
Group By BatchNo
Order By BatchNo;

LET vLastBatch = Peek('Batch', -1, 'BatchTable');
LET vFirstBatch = Peek('Batch', 0, 'BatchTable');

//
FOR vBatchNo =  vFirstBatch to  vLastBatch step vStep 
//

LET vBatchNoStep = vBatchNo + vStep - 1;

TRACE BatchNo $(vBatchNo) - $(vBatchNoStep);

PlanHeaders:
LOAD 
	 PlanIdBase as PlanId, 
     OffsetDateTimeBase as OffsetDateTime,
     PHUriBase as PHUri
Resident  PlanHeadersBase
Where BatchNo >= $(vBatchNo) AND BatchNo <= $(vBatchNoStep)
Order By BatchNo;

LET vRowsQty = NoOfRows('PlanHeaders'); 

//4. Plan MasterTable

FOR Each vPlanId in FieldValueList('PlanId') 

    LET vURL = vBaseURL&'/'&vPlanId; 

    RestConnectorMasterTable:
    SQL SELECT 
    // 	"ocid",
    // 	"id" AS "id_u7",
    // 	"date",
        "__KEY_root",
    // 	(SELECT 
    // 		"@Value",
    // 		"__FK_tag"
    // 	FROM "tag" FK "__FK_tag" ArrayValueAlias "@Value"),
        (SELECT 
            "id" AS "id_u0",
            "__KEY_parties",
            "__FK_parties",
            (SELECT 
                "scheme",
                "id",
                "legalName",
                "legalName_kg",
                "__FK_identifier"
            FROM "identifier" FK "__FK_identifier"),
            (SELECT 
                "ateCode",
                "countryName",
                "region",
                "subregion",
                "district",
                "subdistrict",
                "subsubdistrict",
                "locality",
                "streetAddress",
                "__FK_address"
            FROM "address" FK "__FK_address"),
            (SELECT 
                "name",
                "email",
                "telephone",
                "role",
                "__FK_additionalContactPoints"
            FROM "additionalContactPoints" FK "__FK_additionalContactPoints"),
            (SELECT 
                "@Value" AS "@Value_u0",
                "__FK_roles"
            FROM "roles" FK "__FK_roles" ArrayValueAlias "@Value_u0")
        FROM "parties" PK "__KEY_parties" FK "__FK_parties"),
        (SELECT 
            "id" AS "id_u6",
            "budgetYear",
            "dateCreated" AS "dateCreated_u0",
            "dateChanged",
            "status",
            "type",
            "__KEY_planning",
            "__FK_planning",
            (SELECT 
                "amount",
                "currency",
                "__FK_value"
            FROM "value" FK "__FK_value"),
            (SELECT 
                "id" AS "id_u1",
                "name" AS "name_u0",
                "__FK_buyer"
            FROM "buyer" FK "__FK_buyer"),
            (SELECT 
                "id" AS "id_u5",
                "accountNumber",
                "accountName",
                "budgetLineID",
                "budgetLineName",
                "dateCreated",
                "__KEY_plans",
                "__FK_plans",
                (SELECT 
                    "amount" AS "amount_u0",
                    "reservedAmount",
                    "savedAmount",
                    "currency" AS "currency_u0",
                    "__FK_value_u0"
                FROM "value" FK "__FK_value_u0"),
                (SELECT 
                    "id" AS "id_u4",
                    "quantity",
                    "__KEY_items",
                    "__FK_items",
                    (SELECT 
                        "scheme" AS "scheme_u0",
                        "id" AS "id_u2",
                        "description",
                        "__FK_classification"
                    FROM "classification" FK "__FK_classification"),
                    (SELECT 
                        "id" AS "id_u3",
                        "name" AS "name_u1",
                        "__KEY_unit",
                        "__FK_unit",
                        (SELECT 
                            "amount" AS "amount_u1",
                            "currency" AS "currency_u1",
                            "__FK_value_u1"
                        FROM "value" FK "__FK_value_u1")
                    FROM "unit" PK "__KEY_unit" FK "__FK_unit")
                FROM "items" PK "__KEY_items" FK "__FK_items")
            FROM "plans" PK "__KEY_plans" FK "__FK_plans")
        FROM "planning" PK "__KEY_planning" FK "__FK_planning")
    FROM JSON (wrap on) "root" PK "__KEY_root"
    WITH CONNECTION(URL "$(vURL)");

NEXT vPlanId

//5. Store to QVD
// === Plans ===
Plans:
LOAD	
	[id_u6] as PlanYearId,
    [id_u6] as PlanYearIdOrig,
	[budgetYear] as PlanYear,
	$(vFloorDateConvert([dateCreated_u0])) as DateCreated,
    $(vDateConvert([dateCreated_u0])) as DateTimeCreated,
	$(vFloorDateConvert([dateChanged])) as DateChanged,
    $(vDateConvert([dateChanged])) as DateTimeChanged,
	[status] as PlanStatus,
	[type] as PlanType,
	[__KEY_planning]
//	[__FK_planning] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_planning]);

LET vNoOfPlans = NoOfRows('Plans');

IF vNoOfPlans <> vRowsQty THEN
	TRACE ERROR loading plans;
    Exit Script;
ENDIF

Left Join (Plans)
LOAD	
	[id_u5] as PlanId,
	[accountNumber] as AccountNumber,
	[accountName] as AccountName,
    [accountName]&' - '&[accountNumber] as AccountNameNumber,
	[budgetLineID] as BudgetLineID,
	[budgetLineName] as BudgetLineName,
    [budgetLineName]&' - '&[budgetLineID] as BudgetLineNameID,
// out TT    
	$(vFloorDateConvert([dateCreated])) as BudgetLineDateCreated,
    $(vDateConvert([dateCreated])) as BudgetLineDateTimeCreated,
	[__KEY_plans],
	[__FK_plans] AS [__KEY_planning]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_plans]);

Left Join (Plans)
LOAD	
	[amount_u0] as PlanValue,
   	[currency_u0] as PlanCurrency,
// out TT     
	[reservedAmount] as PlanReservedAmount,
	[savedAmount] as PlanSavedAmount,
	[__FK_value_u0] AS [__KEY_plans]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_value_u0]);

Left Join (Plans)
LOAD	
	[id_u1] as BuyerId,
	[__FK_buyer] AS [__KEY_planning]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_buyer]);

Drop Fields [__KEY_planning], [__KEY_plans] From Plans;

IF NOT Isnull(FileSize('$(TRN_QVD_PATH)Plans.qvd')) THEN
    Concatenate (Plans)
    Load 
        PlanYearId,
        PlanYear,
        DateCreated,
        DateTimeCreated,
        DateChanged,
        DateTimeChanged,
        PlanStatus,
        PlanType,
        PlanId,
        AccountNumber,
        AccountName,
        AccountNameNumber,
        BudgetLineID,
        BudgetLineName,
        BudgetLineNameID,
        PlanValue,
        PlanCurrency,
        BuyerId,
    // out TT    
        BudgetLineDateCreated,
        BudgetLineDateTimeCreated,
        PlanReservedAmount,
        PlanSavedAmount
    FROM [$(TRN_QVD_PATH)Plans.qvd] (qvd)
    Where NOT Exists(PlanYearIdOrig, PlanYearId);
ENDIF

Drop Field PlanYearIdOrig;

Store Plans into [$(TRN_QVD_PATH)Plans.qvd] (qvd);
Drop Table Plans;

// === Items ===
PlanItems_:
LOAD	
	[id_u4] as PlanItemId,
	[quantity] as ItemQuantity,
	[__KEY_items],
	[__FK_items] AS [__KEY_plans]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_items]);

Left Join (PlanItems_)
LOAD	
//	[id_u3],
	[name_u1] as PlanItemUnitName,
	[__KEY_unit],
	[__FK_unit] AS [__KEY_items]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_unit]);

Left Join (PlanItems_)
LOAD	
	[amount_u1] as PlanItemUnitValue,
	[currency_u1] as PlanItemUnitCurrency,
	[__FK_value_u1] AS [__KEY_unit]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_value_u1]);

Left Join (PlanItems_)
LOAD	
	[scheme_u0] as PlanItemScheme, // out TT
	[id_u2] as ItemCPVokgzCode,
	[description] as ItemCPVokgzName,
	[__FK_classification] AS [__KEY_items]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_classification]);

Left Join (PlanItems_)
LOAD
	[id_u5] as PlanId,
	[__KEY_plans],
	[__FK_plans] AS [__KEY_planning]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_plans]);

Left Join (PlanItems_)
LOAD	
	[id_u6] as PlanYearId,
    [id_u6] as PlanYearIdOrig,
	[__KEY_planning]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_planning]);

PlanItems:
Load
	 PlanId,
     PlanYearId,
     PlanYearIdOrig,
	 PlanItemId,
	 ItemQuantity,
     PlanItemUnitName,
     ItemQuantity*PlanItemUnitValue as PlanItemValue,
	 PlanItemUnitCurrency,
     ItemCPVokgzCode,
	 ItemCPVokgzName,
// out TT     
     PlanItemScheme, 
     PlanItemUnitValue
Resident PlanItems_;

Drop Table PlanItems_;

IF NOT Isnull(FileSize('$(TRN_QVD_PATH)PlanItems.qvd')) THEN
    Concatenate (PlanItems)
    Load 
           PlanId,
           PlanYearId,
           PlanItemId,
           ItemQuantity,
           PlanItemUnitName,
           PlanItemValue,
           PlanItemUnitCurrency,
           ItemCPVokgzCode,
           ItemCPVokgzName,
      // out TT     
           PlanItemScheme, 
           PlanItemUnitValue
    FROM [$(TRN_QVD_PATH)PlanItems.qvd] (qvd)
    Where NOT Exists(PlanYearIdOrig, PlanYearId);
ENDIF

Drop Field PlanYearIdOrig;

Store PlanItems into [$(TRN_QVD_PATH)PlanItems.qvd] (qvd);
Drop Table PlanItems;

// === Buyers ===
PlanBuyers_:
LOAD	
	[id_u1] as BuyerId,
	[name_u0] as BuyerName,
    [name_u0]&' - '&[id_u1] as BuyerNameId,
	[__FK_buyer] AS [__KEY_planning]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_buyer]);

Left Join (PlanBuyers_)
LOAD	
	[id_u0] as BuyerId,
	[__KEY_parties]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_parties]);

Left Join (PlanBuyers_)
LOAD	
// 	[ateCode],
// 	[countryName],
// 	[subregion],
// 	[district],
// 	[subdistrict],
// 	[subsubdistrict],
// 	[locality],
// 	[streetAddress],
    [region] as BuyerRegion,
	[__FK_address] AS [__KEY_parties]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_address]);

Left Join (PlanBuyers_)
LOAD	
    $(vDateConvert([dateCreated_u0])) as BuyerDateTimeCreated,
	[__KEY_planning]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_planning]);

IF NOT Isnull(FileSize('$(DIC_QVD_PATH)PlanBuyers.qvd')) THEN
    Concatenate (PlanBuyers_)
    Load 
          BuyerId,
          BuyerName,
          BuyerNameId,
          BuyerRegion,
          BuyerDateTimeCreated
    FROM [$(DIC_QVD_PATH)PlanBuyers.qvd] (qvd);
ENDIF

PlanBuyers:
Load
	 BuyerId,
     LastValue(BuyerName) as BuyerName,
     LastValue(BuyerNameId) as BuyerNameId,
     LastValue(BuyerRegion) as BuyerRegion,
     LastValue(BuyerDateTimeCreated) as BuyerDateTimeCreated
Resident PlanBuyers_
Group By BuyerId
Order By BuyerDateTimeCreated;

Drop Table PlanBuyers_;

Store PlanBuyers into [$(DIC_QVD_PATH)PlanBuyers.qvd] (qvd);
Drop Table PlanBuyers;

DROP TABLE RestConnectorMasterTable;

// 6. Offset Clean
OffsetTablePlan:
LOAD 
	 LastValue(OffsetDateTime) as OffsetDateTime
Resident PlanHeaders;	 

STORE OffsetTablePlan INTO  [$(DIC_QVD_PATH)OffsetTablePlan.txt] (txt); 
DROP Table OffsetTablePlan;

DROP Table PlanHeaders;

//
NEXT vBatchNo
//

DROP Table BatchTable;

